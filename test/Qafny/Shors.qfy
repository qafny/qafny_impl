method Shors(q : Q[n], p : Q[n], n:nat, N : nat, base : nat, r:nat , c:nat) returns (y:nat, py : real)
  requires 1 < base < N
  requires gcd(base,N) == 1
  requires { q[0 , n) : nor ↦ |0⟩ }
  requires { p[0 , n) : nor ↦ |0⟩ }
  ensures y == c * 2^n / r
  ensures py == 4 / (pi * pi * r) //real number
{
  q[0, n) *= H;
  p[0, n) *= λ (x => |(x + 1) % 2  ⟩);
  
  for i in [0, n)
   invariant {
      q[0, i), p[0, n) : en ↦ ∑ k ∈ [0, 2^i) . 1/sqrt(2^i) | k ⟩ | (base ^ k) % N ⟩
  }
  invariant {
      q [i , n) : had ↦ |+⟩
  }
 {
    if (q[i]) { p[0, n) *= λ (x => |base ^ (2 ^ i) * x % N⟩); }
  }

  v,prob *= measure(p[0,n));//we do not care about the v and prob value here. only the partial measurement of p

  q[0,n) *= QFT;

  y,py *= measure(q[0,n), c*2^n/r);

}  

