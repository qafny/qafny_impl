method kappa(a:,y:nat) : real

lemma {:axiom} kappaProperty(a:nat,b:nat,y:nat)
  ensures kappa(a+b,y) == kappa(a,y) * kappa(b,y)

lemma {:axiom} endProperty(y:nat, c, n:nat, r:nat, x)
  requires y == c * 2^n / r
  ensures ∑ k ∈ [0 .. 2^n / r] . ω (r * k * x, 2^n) == 4 / (pi * pi * r)

method HSG(q : Q[n], p : Q[n], n:nat, f : [Bool] -> [Bool], H: set<nat>, r:nat) returns (y:nat, p : real, k:set<nat>)
  requires forall k :: 0 <= k < 2^n ==> forall i :: 0 <= i < 2^n ==> f(n2b(k)) = f(n2b(i)) ==> (x-y) in H
  requires |H| == r
  requires { q[0 , n) : Nor ↦ |0⟩ }
  requires { p[0 , n) : Nor ↦ |0⟩ }
  ensures isGen(y) //we will get y as the final measurement result of the generator of group H.
  ensures p == |H| / 2^n
{
  k *= [];

  for _ in range(log(2^n))
  {
    q[0, n) *= H;
    
    for i in [0, n) with q[i]
      separates q[0, i), p[0, n)
      invariant {
        q[0, i), p[0, n) : En ↦ ∑ k ∈ [0, Pow2(i)) . 1 / sqrt(2^n) . | k , ∑ j ∈ [0, i) . f(n2b(k))[j] ⟩
      }
      invariant {
        q [i , n) : Had ↦ |+⟩
      }
    {
      p[0, N) *= λ ((x: Q n, y:Q n) => (x, ((y + f(x)))));
    }

    v,prob *= measure(p);
    assert { q[0, n) : En ↦ ∑ h ∈ [0, r) . 1 / sqrt(2^n / r) . |v + h⟩ }; 
    q[0,n) *= QFT;

    assert { q[0 .. n] : En ↦ ∑ y ∈ [0, 2^n) . 1 / sqrt(r) * 1 / sqrt(2^n) . ∑ h ∈ [0 .. r] . kappa(v,y) * kappa(h, y) . |y⟩ };
    y,p *= measure(q);

    k := k && kernel(y)
  }
}

//method HSGParent(q : Q[n], p : Q[n], n:nat, f : [Bool] -> [Bool], H: set<nat>, r:nat) returns (ker: set<nat>)
//{
//  ker := [];
//  for _ in range(log(2^n)) // |G| iterations
//  {
//    y, p, k := HSG(q, p, n, f, H, r);
//    ker := ker /&& k;
//  }
//}
