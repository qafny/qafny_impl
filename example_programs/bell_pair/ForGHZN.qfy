//The GHZ proof in Qafny
method GHZ(n : nat, q : Q[n])  //change type name to qreg[n]
  requires n >= 2 //why should be just n > 1, need to change
  requires { q[0, n) : Nor ↦ |0⟩ } //nor, en should be capitalized
  ensures  { q[0, n) : En ↦ (∑ j ∈ [0 , 2) . 1/sqrt(2) |j⟩) } //change en01 to en, there is no difference between en01 and en
                                                                            //maybe we can take some flag to enforce the j is a bit-string, etc.
                                                                            //but a good type checking should be able to infer
                                                                            //need to write amplitude, like the above
                                                                            //what is the meaning of having the tensor?
{
  // induce superposition on the first qubit
  //I think my range representation is better.
  //we should enable the short hand of q[0]
  q[0] *= H;
  assert { q [0..1] : had ↦ (_) }; //why this asertion is necessary? It should be able to automatically inferred.

  // always take the ith qubit as the controller
  //is the splitting necessary? 
  for i in [0, (n - 1)) with q[i, (i + 1)) split at 1
    // provide hints on how to perform separation
    separates q[0, (i + 1)) //you have the splitting above, and then you have the separate, why?
    invariant {
      q [0, (i + 1)) : En ↦ (∑ j ∈ [0 , 2) . 1/sqrt(2) |j⟩)
    }
    invariant {
      q [(i + 1) , n) : Nor ↦ (|0⟩)
    }
  {
    q[(i + 1)] *= λ (x => (x + 1) % 2);
  }
}

// en01 : | 0000 > + | 1111 > if n == 4
// en   : |0> + |Pow2(4) - 1>

method CGHZ(n : nat, q : Q[n], p : Q[1])
  requires { q[0, n) : Nor ↦ |0⟩ } //nor, en should be capitalized
  requires { q[0] : Nor ↦ |0⟩ } //nor, en should be capitalized
  ensures  { p[0],q[0, n) : En ↦ (∑ j ∈ [0 , 2) . 1/sqrt(2)|0⟩|0⟩ + 1/2|1⟩|j⟩) } //we need to think careful about the representation, need to merge with QPE.
{
  p[0] *= H;
  if p[0] {GHZ(n, q);}
}
