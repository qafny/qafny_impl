# Generated from Exp.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3h")
        buf.write("\u04d8\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\3")
        buf.write("\2\6\2\u00be\n\2\r\2\16\2\u00bf\3\2\3\2\3\3\3\3\3\3\3")
        buf.write("\3\3\3\5\3\u00c9\n\3\3\4\3\4\3\4\3\4\3\4\5\4\u00d0\n\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00d8\n\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\5\4\u00df\n\4\3\5\3\5\3\5\3\5\3\5\5\5\u00e6\n\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\5\5\u00ee\n\5\3\5\3\5\3\5\5\5\u00f3")
        buf.write("\n\5\3\5\3\5\5\5\u00f7\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u00fe")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\7\t\u0118")
        buf.write("\n\t\f\t\16\t\u011b\13\t\3\n\3\n\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\7\13\u0125\n\13\f\13\16\13\u0128\13\13\3\f\7")
        buf.write("\f\u012b\n\f\f\f\16\f\u012e\13\f\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0140\n")
        buf.write("\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0149\n\16")
        buf.write("\3\16\3\16\5\16\u014d\n\16\3\17\3\17\3\17\3\17\5\17\u0153")
        buf.write("\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\5\20\u0164\n\20\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\5\21\u016c\n\21\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\5\22\u017d\n\22\3\23\3\23\3\23\3\23\3\23\5\23\u0184\n")
        buf.write("\23\3\24\3\24\3\24\3\24\3\24\5\24\u018b\n\24\3\25\3\25")
        buf.write("\3\25\3\25\3\25\5\25\u0192\n\25\3\26\3\26\3\26\3\26\3")
        buf.write("\27\3\27\3\27\3\27\6\27\u019c\n\27\r\27\16\27\u019d\3")
        buf.write("\30\3\30\3\31\3\31\3\31\3\31\3\31\5\31\u01a7\n\31\3\31")
        buf.write("\3\31\3\31\7\31\u01ac\n\31\f\31\16\31\u01af\13\31\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u01b9\n\32\f")
        buf.write("\32\16\32\u01bc\13\32\3\33\3\33\5\33\u01c0\n\33\3\33\3")
        buf.write("\33\5\33\u01c4\n\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u01d3\n\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\5\34\u01e4\n\34\3\34\3\34\3\35\3\35\3")
        buf.write("\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37")
        buf.write("\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u0200\n \3!\3!\5")
        buf.write("!\u0204\n!\3!\3!\3!\5!\u0209\n!\3!\3!\5!\u020d\n!\3!\3")
        buf.write("!\3!\5!\u0212\n!\3!\3!\5!\u0216\n!\3!\3!\3!\3!\5!\u021c")
        buf.write("\n!\3!\3!\3!\3!\3!\3!\5!\u0224\n!\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\5\"\u022f\n\"\3\"\3\"\3#\3#\3#\3#\3$")
        buf.write("\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0247")
        buf.write("\n%\3&\3&\3&\3&\3&\3\'\3\'\3\'\7\'\u0251\n\'\f\'\16\'")
        buf.write("\u0254\13\'\3(\3(\5(\u0258\n(\3(\3(\3(\5(\u025d\n(\7(")
        buf.write("\u025f\n(\f(\16(\u0262\13(\3)\3)\5)\u0266\n)\3)\3)\3)")
        buf.write("\3)\3*\3*\3*\5*\u026f\n*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3")
        buf.write("+\5+\u027b\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u0286\n+\3")
        buf.write("+\3+\3+\3+\3+\5+\u028d\n+\3,\3,\3,\3,\3,\3,\5,\u0295\n")
        buf.write(",\3,\3,\5,\u0299\n,\3,\3,\3,\3-\3-\3-\3-\3.\3.\3.\3/\3")
        buf.write("/\3/\3/\3/\3/\5/\u02ab\n/\3/\5/\u02ae\n/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\5/\u02b8\n/\3\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write("\60\3\60\5\60\u02c2\n\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\5\60\u02ca\n\60\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u02d2")
        buf.write("\n\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\7\63\u02e1\n\63\f\63\16\63\u02e4\13\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\6\63\u02eb\n\63\r\63\16\63\u02ec")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u02f5\n\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\5\65")
        buf.write("\u0302\n\65\3\65\3\65\3\65\3\65\3\65\3\66\3\66\5\66\u030b")
        buf.write("\n\66\3\66\3\66\3\66\3\66\3\67\3\67\5\67\u0313\n\67\3")
        buf.write("\67\3\67\3\67\5\67\u0318\n\67\7\67\u031a\n\67\f\67\16")
        buf.write("\67\u031d\13\67\38\38\38\38\38\38\38\38\38\58\u0328\n")
        buf.write("8\38\38\38\38\38\38\38\38\38\38\38\38\78\u0336\n8\f8\16")
        buf.write("8\u0339\138\39\39\39\59\u033e\n9\39\39\39\39\39\39\39")
        buf.write("\39\39\39\39\39\79\u034c\n9\f9\169\u034f\139\3:\3:\3:")
        buf.write("\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3")
        buf.write(":\5:\u0366\n:\3;\3;\3;\5;\u036b\n;\3;\3;\3;\3;\3;\3;\5")
        buf.write(";\u0373\n;\3<\3<\3<\5<\u0378\n<\3<\3<\3<\3<\3<\3<\5<\u0380")
        buf.write("\n<\3=\3=\3=\5=\u0385\n=\3=\3=\3=\3=\3=\3=\5=\u038d\n")
        buf.write("=\3>\3>\3>\3>\3>\3?\3?\3?\3?\3@\3@\3@\3@\3@\5@\u039d\n")
        buf.write("@\3@\3@\5@\u03a1\n@\3@\3@\3A\3A\3A\3A\3A\3B\3B\3B\3B\3")
        buf.write("B\3C\3C\3C\3C\7C\u03b3\nC\fC\16C\u03b6\13C\5C\u03b8\n")
        buf.write("C\3C\3C\3D\3D\3D\6D\u03bf\nD\rD\16D\u03c0\3E\3E\3E\3E")
        buf.write("\3E\3E\5E\u03c9\nE\3F\3F\5F\u03cd\nF\3F\3F\3F\3F\3F\3")
        buf.write("F\5F\u03d5\nF\3F\3F\3F\3F\3F\3F\3F\5F\u03de\nF\3F\3F\3")
        buf.write("F\3F\3F\3F\5F\u03e6\nF\3F\3F\3F\3F\3F\3F\5F\u03ee\nF\3")
        buf.write("F\3F\3F\3F\3F\3F\5F\u03f6\nF\3F\3F\3F\3F\3F\3F\5F\u03fe")
        buf.write("\nF\3F\3F\3F\3F\3F\3F\5F\u0406\nF\3F\3F\3F\3F\5F\u040c")
        buf.write("\nF\3G\3G\3G\3G\3G\3G\3G\3G\3G\3H\6H\u0418\nH\rH\16H\u0419")
        buf.write("\3I\5I\u041d\nI\3I\3I\3I\3I\7I\u0423\nI\fI\16I\u0426\13")
        buf.write("I\3I\3I\3I\3I\5I\u042c\nI\3J\3J\3J\3K\3K\3K\5K\u0434\n")
        buf.write("K\3L\3L\3L\7L\u0439\nL\fL\16L\u043c\13L\3M\3M\3M\3M\3")
        buf.write("N\3N\3N\7N\u0445\nN\fN\16N\u0448\13N\3O\3O\3O\5O\u044d")
        buf.write("\nO\3P\3P\3P\7P\u0452\nP\fP\16P\u0455\13P\3Q\3Q\3Q\3Q")
        buf.write("\3Q\3Q\3R\3R\3R\3R\3S\3S\5S\u0463\nS\3S\3S\5S\u0467\n")
        buf.write("S\3S\3S\3T\3T\3T\3U\3U\5U\u0470\nU\3U\3U\3U\6U\u0475\n")
        buf.write("U\rU\16U\u0476\3V\3V\3V\5V\u047c\nV\3W\3W\3W\3W\3W\3W")
        buf.write("\7W\u0484\nW\fW\16W\u0487\13W\3W\3W\5W\u048b\nW\3W\3W")
        buf.write("\3W\5W\u0490\nW\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3")
        buf.write("X\5X\u04b1\nX\3X\3X\3X\3X\3X\7X\u04b8\nX\fX\16X\u04bb")
        buf.write("\13X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u04c6\nY\3Z\3Z\3Z\3")
        buf.write("Z\3Z\3Z\5Z\u04ce\nZ\3[\3[\3\\\3\\\3]\3]\3^\3^\3^\2\5n")
        buf.write("p\u00ae_\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(")
        buf.write("*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\2\13\3\2\60\61\3\2X]\4\2\21\21dd\4\2\32\32")
        buf.write("VV\3\2 !\3\2<=\3\2>@\3\2AB\3\2OP\2\u053b\2\u00bd\3\2\2")
        buf.write("\2\4\u00c8\3\2\2\2\6\u00ca\3\2\2\2\b\u00e0\3\2\2\2\n\u00f8")
        buf.write("\3\2\2\2\f\u0105\3\2\2\2\16\u010e\3\2\2\2\20\u0119\3\2")
        buf.write("\2\2\22\u011c\3\2\2\2\24\u0126\3\2\2\2\26\u012c\3\2\2")
        buf.write("\2\30\u013f\3\2\2\2\32\u014c\3\2\2\2\34\u0152\3\2\2\2")
        buf.write("\36\u0163\3\2\2\2 \u016b\3\2\2\2\"\u017c\3\2\2\2$\u0183")
        buf.write("\3\2\2\2&\u018a\3\2\2\2(\u0191\3\2\2\2*\u0193\3\2\2\2")
        buf.write(",\u0197\3\2\2\2.\u019f\3\2\2\2\60\u01a1\3\2\2\2\62\u01b0")
        buf.write("\3\2\2\2\64\u01c3\3\2\2\2\66\u01c5\3\2\2\28\u01e7\3\2")
        buf.write("\2\2:\u01eb\3\2\2\2<\u01f0\3\2\2\2>\u01ff\3\2\2\2@\u0223")
        buf.write("\3\2\2\2B\u0225\3\2\2\2D\u0232\3\2\2\2F\u0236\3\2\2\2")
        buf.write("H\u0246\3\2\2\2J\u0248\3\2\2\2L\u024d\3\2\2\2N\u0257\3")
        buf.write("\2\2\2P\u0265\3\2\2\2R\u026b\3\2\2\2T\u028c\3\2\2\2V\u028e")
        buf.write("\3\2\2\2X\u029d\3\2\2\2Z\u02a1\3\2\2\2\\\u02a4\3\2\2\2")
        buf.write("^\u02b9\3\2\2\2`\u02d1\3\2\2\2b\u02d3\3\2\2\2d\u02ea\3")
        buf.write("\2\2\2f\u02ee\3\2\2\2h\u02fb\3\2\2\2j\u0308\3\2\2\2l\u0312")
        buf.write("\3\2\2\2n\u0327\3\2\2\2p\u033d\3\2\2\2r\u0365\3\2\2\2")
        buf.write("t\u0372\3\2\2\2v\u037f\3\2\2\2x\u038c\3\2\2\2z\u038e\3")
        buf.write("\2\2\2|\u0393\3\2\2\2~\u0397\3\2\2\2\u0080\u03a4\3\2\2")
        buf.write("\2\u0082\u03a9\3\2\2\2\u0084\u03ae\3\2\2\2\u0086\u03bb")
        buf.write("\3\2\2\2\u0088\u03c8\3\2\2\2\u008a\u040b\3\2\2\2\u008c")
        buf.write("\u040d\3\2\2\2\u008e\u0417\3\2\2\2\u0090\u042b\3\2\2\2")
        buf.write("\u0092\u042d\3\2\2\2\u0094\u0433\3\2\2\2\u0096\u0435\3")
        buf.write("\2\2\2\u0098\u043d\3\2\2\2\u009a\u0441\3\2\2\2\u009c\u0449")
        buf.write("\3\2\2\2\u009e\u044e\3\2\2\2\u00a0\u0456\3\2\2\2\u00a2")
        buf.write("\u045c\3\2\2\2\u00a4\u0460\3\2\2\2\u00a6\u046a\3\2\2\2")
        buf.write("\u00a8\u046f\3\2\2\2\u00aa\u047b\3\2\2\2\u00ac\u048f\3")
        buf.write("\2\2\2\u00ae\u04b0\3\2\2\2\u00b0\u04c5\3\2\2\2\u00b2\u04cd")
        buf.write("\3\2\2\2\u00b4\u04cf\3\2\2\2\u00b6\u04d1\3\2\2\2\u00b8")
        buf.write("\u04d3\3\2\2\2\u00ba\u04d5\3\2\2\2\u00bc\u00be\5\4\3\2")
        buf.write("\u00bd\u00bc\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00bd\3")
        buf.write("\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1\u00c2")
        buf.write("\7\2\2\3\u00c2\3\3\2\2\2\u00c3\u00c9\7c\2\2\u00c4\u00c9")
        buf.write("\5\6\4\2\u00c5\u00c9\5\b\5\2\u00c6\u00c9\5\n\6\2\u00c7")
        buf.write("\u00c9\5\f\7\2\u00c8\u00c3\3\2\2\2\u00c8\u00c4\3\2\2\2")
        buf.write("\u00c8\u00c5\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c8\u00c7\3")
        buf.write("\2\2\2\u00c9\5\3\2\2\2\u00ca\u00cf\7\3\2\2\u00cb\u00cc")
        buf.write("\7\4\2\2\u00cc\u00cd\7\5\2\2\u00cd\u00ce\7,\2\2\u00ce")
        buf.write("\u00d0\7\6\2\2\u00cf\u00cb\3\2\2\2\u00cf\u00d0\3\2\2\2")
        buf.write("\u00d0\u00d1\3\2\2\2\u00d1\u00d2\7`\2\2\u00d2\u00d3\7")
        buf.write("\7\2\2\u00d3\u00d4\5\u0096L\2\u00d4\u00d7\7\b\2\2\u00d5")
        buf.write("\u00d6\7\64\2\2\u00d6\u00d8\5\16\b\2\u00d7\u00d5\3\2\2")
        buf.write("\2\u00d7\u00d8\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00de")
        buf.write("\5\20\t\2\u00da\u00db\7\4\2\2\u00db\u00dc\5\26\f\2\u00dc")
        buf.write("\u00dd\7\6\2\2\u00dd\u00df\3\2\2\2\u00de\u00da\3\2\2\2")
        buf.write("\u00de\u00df\3\2\2\2\u00df\7\3\2\2\2\u00e0\u00e5\7-\2")
        buf.write("\2\u00e1\u00e2\7\4\2\2\u00e2\u00e3\7\5\2\2\u00e3\u00e4")
        buf.write("\7,\2\2\u00e4\u00e6\7\6\2\2\u00e5\u00e1\3\2\2\2\u00e5")
        buf.write("\u00e6\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e8\7`\2\2")
        buf.write("\u00e8\u00e9\7\7\2\2\u00e9\u00ea\5\u0096L\2\u00ea\u00ed")
        buf.write("\7\b\2\2\u00eb\u00ec\7\5\2\2\u00ec\u00ee\5\u00acW\2\u00ed")
        buf.write("\u00eb\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00f6\3\2\2\2")
        buf.write("\u00ef\u00f2\7\4\2\2\u00f0\u00f3\5p9\2\u00f1\u00f3\5\64")
        buf.write("\33\2\u00f2\u00f0\3\2\2\2\u00f2\u00f1\3\2\2\2\u00f3\u00f4")
        buf.write("\3\2\2\2\u00f4\u00f5\7\6\2\2\u00f5\u00f7\3\2\2\2\u00f6")
        buf.write("\u00ef\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\t\3\2\2\2\u00f8")
        buf.write("\u00fd\7.\2\2\u00f9\u00fa\7\4\2\2\u00fa\u00fb\7\5\2\2")
        buf.write("\u00fb\u00fc\7,\2\2\u00fc\u00fe\7\6\2\2\u00fd\u00f9\3")
        buf.write("\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0100")
        buf.write("\7`\2\2\u0100\u0101\7\7\2\2\u0101\u0102\5\u0096L\2\u0102")
        buf.write("\u0103\7\b\2\2\u0103\u0104\5\20\t\2\u0104\13\3\2\2\2\u0105")
        buf.write("\u0106\7/\2\2\u0106\u0107\7`\2\2\u0107\u0108\7\7\2\2\u0108")
        buf.write("\u0109\5\u0096L\2\u0109\u010a\7\b\2\2\u010a\u010b\7\4")
        buf.write("\2\2\u010b\u010c\5\64\33\2\u010c\u010d\7\6\2\2\u010d\r")
        buf.write("\3\2\2\2\u010e\u010f\7\7\2\2\u010f\u0110\5\u0096L\2\u0110")
        buf.write("\u0111\7\b\2\2\u0111\17\3\2\2\2\u0112\u0113\5\22\n\2\u0113")
        buf.write("\u0114\5\32\16\2\u0114\u0118\3\2\2\2\u0115\u0116\7\62")
        buf.write("\2\2\u0116\u0118\5p9\2\u0117\u0112\3\2\2\2\u0117\u0115")
        buf.write("\3\2\2\2\u0118\u011b\3\2\2\2\u0119\u0117\3\2\2\2\u0119")
        buf.write("\u011a\3\2\2\2\u011a\21\3\2\2\2\u011b\u0119\3\2\2\2\u011c")
        buf.write("\u011d\t\2\2\2\u011d\23\3\2\2\2\u011e\u011f\7U\2\2\u011f")
        buf.write("\u0125\5\32\16\2\u0120\u0121\7\62\2\2\u0121\u0125\5p9")
        buf.write("\2\u0122\u0123\7\63\2\2\u0123\u0125\5\u009eP\2\u0124\u011e")
        buf.write("\3\2\2\2\u0124\u0120\3\2\2\2\u0124\u0122\3\2\2\2\u0125")
        buf.write("\u0128\3\2\2\2\u0126\u0124\3\2\2\2\u0126\u0127\3\2\2\2")
        buf.write("\u0127\25\3\2\2\2\u0128\u0126\3\2\2\2\u0129\u012b\5\30")
        buf.write("\r\2\u012a\u0129\3\2\2\2\u012b\u012e\3\2\2\2\u012c\u012a")
        buf.write("\3\2\2\2\u012c\u012d\3\2\2\2\u012d\27\3\2\2\2\u012e\u012c")
        buf.write("\3\2\2\2\u012f\u0140\5D#\2\u0130\u0140\5F$\2\u0131\u0140")
        buf.write("\5H%\2\u0132\u0140\5J&\2\u0133\u0140\5P)\2\u0134\u0140")
        buf.write("\5R*\2\u0135\u0140\5T+\2\u0136\u0140\5V,\2\u0137\u0140")
        buf.write("\5\\/\2\u0138\u0140\5f\64\2\u0139\u0140\5h\65\2\u013a")
        buf.write("\u013b\5j\66\2\u013b\u013c\7\t\2\2\u013c\u0140\3\2\2\2")
        buf.write("\u013d\u0140\5X-\2\u013e\u0140\5Z.\2\u013f\u012f\3\2\2")
        buf.write("\2\u013f\u0130\3\2\2\2\u013f\u0131\3\2\2\2\u013f\u0132")
        buf.write("\3\2\2\2\u013f\u0133\3\2\2\2\u013f\u0134\3\2\2\2\u013f")
        buf.write("\u0135\3\2\2\2\u013f\u0136\3\2\2\2\u013f\u0137\3\2\2\2")
        buf.write("\u013f\u0138\3\2\2\2\u013f\u0139\3\2\2\2\u013f\u013a\3")
        buf.write("\2\2\2\u013f\u013d\3\2\2\2\u013f\u013e\3\2\2\2\u0140\31")
        buf.write("\3\2\2\2\u0141\u014d\5\62\32\2\u0142\u014d\5 \21\2\u0143")
        buf.write("\u014d\5,\27\2\u0144\u0148\7\4\2\2\u0145\u0149\5\62\32")
        buf.write("\2\u0146\u0149\5 \21\2\u0147\u0149\5,\27\2\u0148\u0145")
        buf.write("\3\2\2\2\u0148\u0146\3\2\2\2\u0148\u0147\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u014b\7\6\2\2\u014b\u014d\3\2\2\2")
        buf.write("\u014c\u0141\3\2\2\2\u014c\u0142\3\2\2\2\u014c\u0143\3")
        buf.write("\2\2\2\u014c\u0144\3\2\2\2\u014d\33\3\2\2\2\u014e\u0153")
        buf.write("\5$\23\2\u014f\u0153\5\36\20\2\u0150\u0153\7`\2\2\u0151")
        buf.write("\u0153\5\u00ba^\2\u0152\u014e\3\2\2\2\u0152\u014f\3\2")
        buf.write("\2\2\u0152\u0150\3\2\2\2\u0152\u0151\3\2\2\2\u0153\35")
        buf.write("\3\2\2\2\u0154\u0164\5\u00a8U\2\u0155\u0156\7\4\2\2\u0156")
        buf.write("\u0157\5\u009eP\2\u0157\u0158\7\6\2\2\u0158\u0159\5.\30")
        buf.write("\2\u0159\u015a\5p9\2\u015a\u0164\3\2\2\2\u015b\u015c\5")
        buf.write("p9\2\u015c\u015d\5.\30\2\u015d\u015e\5p9\2\u015e\u015f")
        buf.write("\7d\2\2\u015f\u0160\5\u00a6T\2\u0160\u0164\3\2\2\2\u0161")
        buf.write("\u0162\7\n\2\2\u0162\u0164\5\36\20\2\u0163\u0154\3\2\2")
        buf.write("\2\u0163\u0155\3\2\2\2\u0163\u015b\3\2\2\2\u0163\u0161")
        buf.write("\3\2\2\2\u0164\37\3\2\2\2\u0165\u016c\5\"\22\2\u0166\u0167")
        buf.write("\5\"\22\2\u0167\u0168\7\13\2\2\u0168\u0169\5 \21\2\u0169")
        buf.write("\u016c\3\2\2\2\u016a\u016c\5\62\32\2\u016b\u0165\3\2\2")
        buf.write("\2\u016b\u0166\3\2\2\2\u016b\u016a\3\2\2\2\u016c!\3\2")
        buf.write("\2\2\u016d\u017d\5$\23\2\u016e\u016f\7\66\2\2\u016f\u0170")
        buf.write("\5\u009cO\2\u0170\u0171\7\f\2\2\u0171\u0172\5,\27\2\u0172")
        buf.write("\u0173\7\13\2\2\u0173\u0174\5 \21\2\u0174\u017d\3\2\2")
        buf.write("\2\u0175\u0176\7\66\2\2\u0176\u0177\5\u009cO\2\u0177\u0178")
        buf.write("\7S\2\2\u0178\u0179\5\u00a0Q\2\u0179\u017a\7\13\2\2\u017a")
        buf.write("\u017b\5 \21\2\u017b\u017d\3\2\2\2\u017c\u016d\3\2\2\2")
        buf.write("\u017c\u016e\3\2\2\2\u017c\u0175\3\2\2\2\u017d#\3\2\2")
        buf.write("\2\u017e\u017f\5&\24\2\u017f\u0180\7W\2\2\u0180\u0181")
        buf.write("\5$\23\2\u0181\u0184\3\2\2\2\u0182\u0184\5&\24\2\u0183")
        buf.write("\u017e\3\2\2\2\u0183\u0182\3\2\2\2\u0184%\3\2\2\2\u0185")
        buf.write("\u0186\5(\25\2\u0186\u0187\7V\2\2\u0187\u0188\5&\24\2")
        buf.write("\u0188\u018b\3\2\2\2\u0189\u018b\5(\25\2\u018a\u0185\3")
        buf.write("\2\2\2\u018a\u0189\3\2\2\2\u018b\'\3\2\2\2\u018c\u018d")
        buf.write("\7\n\2\2\u018d\u0192\5(\25\2\u018e\u0192\5j\66\2\u018f")
        buf.write("\u0192\5,\27\2\u0190\u0192\5*\26\2\u0191\u018c\3\2\2\2")
        buf.write("\u0191\u018e\3\2\2\2\u0191\u018f\3\2\2\2\u0191\u0190\3")
        buf.write("\2\2\2\u0192)\3\2\2\2\u0193\u0194\7`\2\2\u0194\u0195\7")
        buf.write("S\2\2\u0195\u0196\7`\2\2\u0196+\3\2\2\2\u0197\u019b\5")
        buf.write("n8\2\u0198\u0199\5.\30\2\u0199\u019a\5n8\2\u019a\u019c")
        buf.write("\3\2\2\2\u019b\u0198\3\2\2\2\u019c\u019d\3\2\2\2\u019d")
        buf.write("\u019b\3\2\2\2\u019d\u019e\3\2\2\2\u019e-\3\2\2\2\u019f")
        buf.write("\u01a0\t\3\2\2\u01a0/\3\2\2\2\u01a1\u01a2\5\u00b0Y\2\u01a2")
        buf.write("\u01a6\7\r\2\2\u01a3\u01a4\5p9\2\u01a4\u01a5\7C\2\2\u01a5")
        buf.write("\u01a7\3\2\2\2\u01a6\u01a3\3\2\2\2\u01a6\u01a7\3\2\2\2")
        buf.write("\u01a7\u01a8\3\2\2\2\u01a8\u01ad\5\64\33\2\u01a9\u01aa")
        buf.write("\7<\2\2\u01aa\u01ac\5\64\33\2\u01ab\u01a9\3\2\2\2\u01ac")
        buf.write("\u01af\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ad\u01ae\3\2\2\2")
        buf.write("\u01ae\61\3\2\2\2\u01af\u01ad\3\2\2\2\u01b0\u01b1\5\u009e")
        buf.write("P\2\u01b1\u01b2\7\5\2\2\u01b2\u01ba\5\60\31\2\u01b3\u01b4")
        buf.write("\7\16\2\2\u01b4\u01b5\5\u009eP\2\u01b5\u01b6\7\5\2\2\u01b6")
        buf.write("\u01b7\5\60\31\2\u01b7\u01b9\3\2\2\2\u01b8\u01b3\3\2\2")
        buf.write("\2\u01b9\u01bc\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01bb")
        buf.write("\3\2\2\2\u01bb\63\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bd\u01c4")
        buf.write("\5> \2\u01be\u01c0\5p9\2\u01bf\u01be\3\2\2\2\u01bf\u01c0")
        buf.write("\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c4\5d\63\2\u01c2")
        buf.write("\u01c4\5@!\2\u01c3\u01bd\3\2\2\2\u01c3\u01bf\3\2\2\2\u01c3")
        buf.write("\u01c2\3\2\2\2\u01c4\65\3\2\2\2\u01c5\u01c6\7\17\2\2\u01c6")
        buf.write("\u01e3\7\7\2\2\u01c7\u01c8\5p9\2\u01c8\u01c9\7\20\2\2")
        buf.write("\u01c9\u01ca\5p9\2\u01ca\u01cb\7\20\2\2\u01cb\u01cc\5")
        buf.write("p9\2\u01cc\u01cd\7\20\2\2\u01cd\u01ce\5p9\2\u01ce\u01e4")
        buf.write("\3\2\2\2\u01cf\u01d0\5p9\2\u01d0\u01d1\7\20\2\2\u01d1")
        buf.write("\u01d3\3\2\2\2\u01d2\u01cf\3\2\2\2\u01d2\u01d3\3\2\2\2")
        buf.write("\u01d3\u01d4\3\2\2\2\u01d4\u01d5\58\35\2\u01d5\u01d6\7")
        buf.write("\20\2\2\u01d6\u01d7\58\35\2\u01d7\u01e4\3\2\2\2\u01d8")
        buf.write("\u01d9\7`\2\2\u01d9\u01da\7\20\2\2\u01da\u01db\5\u00ba")
        buf.write("^\2\u01db\u01dc\7\20\2\2\u01dc\u01dd\5p9\2\u01dd\u01e4")
        buf.write("\3\2\2\2\u01de\u01df\5p9\2\u01df\u01e0\7\20\2\2\u01e0")
        buf.write("\u01e1\5p9\2\u01e1\u01e4\3\2\2\2\u01e2\u01e4\5<\37\2\u01e3")
        buf.write("\u01c7\3\2\2\2\u01e3\u01d2\3\2\2\2\u01e3\u01d8\3\2\2\2")
        buf.write("\u01e3\u01de\3\2\2\2\u01e3\u01e2\3\2\2\2\u01e4\u01e5\3")
        buf.write("\2\2\2\u01e5\u01e6\7\b\2\2\u01e6\67\3\2\2\2\u01e7\u01e8")
        buf.write("\5p9\2\u01e8\u01e9\7\5\2\2\u01e9\u01ea\5\34\17\2\u01ea")
        buf.write("9\3\2\2\2\u01eb\u01ec\5p9\2\u01ec\u01ed\7\5\2\2\u01ed")
        buf.write("\u01ee\5\u0090I\2\u01ee\u01ef\5j\66\2\u01ef;\3\2\2\2\u01f0")
        buf.write("\u01f1\5:\36\2\u01f1\u01f2\7<\2\2\u01f2\u01f3\5:\36\2")
        buf.write("\u01f3=\3\2\2\2\u01f4\u01f5\7\16\2\2\u01f5\u01f6\7`\2")
        buf.write("\2\u01f6\u01f7\7C\2\2\u01f7\u0200\5\u008eH\2\u01f8\u01f9")
        buf.write("\7\16\2\2\u01f9\u01fa\7`\2\2\u01fa\u01fb\7S\2\2\u01fb")
        buf.write("\u01fc\5\u00a0Q\2\u01fc\u01fd\7C\2\2\u01fd\u01fe\5\u008e")
        buf.write("H\2\u01fe\u0200\3\2\2\2\u01ff\u01f4\3\2\2\2\u01ff\u01f8")
        buf.write("\3\2\2\2\u0200?\3\2\2\2\u0201\u0215\5B\"\2\u0202\u0204")
        buf.write("\5p9\2\u0203\u0202\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0205")
        buf.write("\3\2\2\2\u0205\u0208\5d\63\2\u0206\u0207\7V\2\2\u0207")
        buf.write("\u0209\5\34\17\2\u0208\u0206\3\2\2\2\u0208\u0209\3\2\2")
        buf.write("\2\u0209\u0216\3\2\2\2\u020a\u020c\7\7\2\2\u020b\u020d")
        buf.write("\5p9\2\u020c\u020b\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020e")
        buf.write("\3\2\2\2\u020e\u0211\5d\63\2\u020f\u0210\7V\2\2\u0210")
        buf.write("\u0212\5\34\17\2\u0211\u020f\3\2\2\2\u0211\u0212\3\2\2")
        buf.write("\2\u0212\u0213\3\2\2\2\u0213\u0214\7\b\2\2\u0214\u0216")
        buf.write("\3\2\2\2\u0215\u0203\3\2\2\2\u0215\u020a\3\2\2\2\u0216")
        buf.write("\u0224\3\2\2\2\u0217\u021b\5B\"\2\u0218\u0219\5p9\2\u0219")
        buf.write("\u021a\7C\2\2\u021a\u021c\3\2\2\2\u021b\u0218\3\2\2\2")
        buf.write("\u021b\u021c\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u021e\5")
        buf.write("@!\2\u021e\u0224\3\2\2\2\u021f\u0220\7\7\2\2\u0220\u0221")
        buf.write("\5@!\2\u0221\u0222\7\b\2\2\u0222\u0224\3\2\2\2\u0223\u0201")
        buf.write("\3\2\2\2\u0223\u0217\3\2\2\2\u0223\u021f\3\2\2\2\u0224")
        buf.write("A\3\2\2\2\u0225\u0226\7T\2\2\u0226\u0227\7`\2\2\u0227")
        buf.write("\u0228\7S\2\2\u0228\u022e\5\u00a0Q\2\u0229\u022a\t\4\2")
        buf.write("\2\u022a\u022b\7\7\2\2\u022b\u022c\5\34\17\2\u022c\u022d")
        buf.write("\7\b\2\2\u022d\u022f\3\2\2\2\u022e\u0229\3\2\2\2\u022e")
        buf.write("\u022f\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u0231\7C\2\2")
        buf.write("\u0231C\3\2\2\2\u0232\u0233\7\22\2\2\u0233\u0234\5\32")
        buf.write("\16\2\u0234\u0235\7\t\2\2\u0235E\3\2\2\2\u0236\u0237\7")
        buf.write("\7\2\2\u0237\u0238\5\u00b0Y\2\u0238\u0239\7\b\2\2\u0239")
        buf.write("\u023a\5\u009eP\2\u023a\u023b\7\t\2\2\u023bG\3\2\2\2\u023c")
        buf.write("\u023d\7\23\2\2\u023d\u023e\5\u0096L\2\u023e\u023f\7\t")
        buf.write("\2\2\u023f\u0247\3\2\2\2\u0240\u0241\7\23\2\2\u0241\u0242")
        buf.write("\5\u009aN\2\u0242\u0243\7\24\2\2\u0243\u0244\5p9\2\u0244")
        buf.write("\u0245\7\t\2\2\u0245\u0247\3\2\2\2\u0246\u023c\3\2\2\2")
        buf.write("\u0246\u0240\3\2\2\2\u0247I\3\2\2\2\u0248\u0249\5N(\2")
        buf.write("\u0249\u024a\7\24\2\2\u024a\u024b\5p9\2\u024b\u024c\7")
        buf.write("\t\2\2\u024cK\3\2\2\2\u024d\u0252\7`\2\2\u024e\u024f\7")
        buf.write("\20\2\2\u024f\u0251\7`\2\2\u0250\u024e\3\2\2\2\u0251\u0254")
        buf.write("\3\2\2\2\u0252\u0250\3\2\2\2\u0252\u0253\3\2\2\2\u0253")
        buf.write("M\3\2\2\2\u0254\u0252\3\2\2\2\u0255\u0258\7`\2\2\u0256")
        buf.write("\u0258\5\u00a6T\2\u0257\u0255\3\2\2\2\u0257\u0256\3\2")
        buf.write("\2\2\u0258\u0260\3\2\2\2\u0259\u025c\7\20\2\2\u025a\u025d")
        buf.write("\7`\2\2\u025b\u025d\5\u00a6T\2\u025c\u025a\3\2\2\2\u025c")
        buf.write("\u025b\3\2\2\2\u025d\u025f\3\2\2\2\u025e\u0259\3\2\2\2")
        buf.write("\u025f\u0262\3\2\2\2\u0260\u025e\3\2\2\2\u0260\u0261\3")
        buf.write("\2\2\2\u0261O\3\2\2\2\u0262\u0260\3\2\2\2\u0263\u0266")
        buf.write("\5\u009eP\2\u0264\u0266\7`\2\2\u0265\u0263\3\2\2\2\u0265")
        buf.write("\u0264\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0268\7\25\2")
        buf.write("\2\u0268\u0269\5\u0088E\2\u0269\u026a\7\t\2\2\u026aQ\3")
        buf.write("\2\2\2\u026b\u026e\7\23\2\2\u026c\u026f\5\u009eP\2\u026d")
        buf.write("\u026f\7`\2\2\u026e\u026c\3\2\2\2\u026e\u026d\3\2\2\2")
        buf.write("\u026f\u0270\3\2\2\2\u0270\u0271\7\25\2\2\u0271\u0272")
        buf.write("\5p9\2\u0272\u0273\7\t\2\2\u0273S\3\2\2\2\u0274\u0275")
        buf.write("\5N(\2\u0275\u0276\7\25\2\2\u0276\u0277\7\26\2\2\u0277")
        buf.write("\u027a\7\7\2\2\u0278\u027b\5\u009eP\2\u0279\u027b\7`\2")
        buf.write("\2\u027a\u0278\3\2\2\2\u027a\u0279\3\2\2\2\u027b\u027c")
        buf.write("\3\2\2\2\u027c\u027d\7\b\2\2\u027d\u027e\7\t\2\2\u027e")
        buf.write("\u028d\3\2\2\2\u027f\u0280\5N(\2\u0280\u0281\7\25\2\2")
        buf.write("\u0281\u0282\7\26\2\2\u0282\u0285\7\7\2\2\u0283\u0286")
        buf.write("\5\u009eP\2\u0284\u0286\7`\2\2\u0285\u0283\3\2\2\2\u0285")
        buf.write("\u0284\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288\7\20\2")
        buf.write("\2\u0288\u0289\5p9\2\u0289\u028a\7\b\2\2\u028a\u028b\7")
        buf.write("\t\2\2\u028b\u028d\3\2\2\2\u028c\u0274\3\2\2\2\u028c\u027f")
        buf.write("\3\2\2\2\u028dU\3\2\2\2\u028e\u028f\5N(\2\u028f\u0290")
        buf.write("\7\25\2\2\u0290\u0291\7\27\2\2\u0291\u0294\7\7\2\2\u0292")
        buf.write("\u0295\5\u009eP\2\u0293\u0295\7`\2\2\u0294\u0292\3\2\2")
        buf.write("\2\u0294\u0293\3\2\2\2\u0295\u0298\3\2\2\2\u0296\u0297")
        buf.write("\7\20\2\2\u0297\u0299\5p9\2\u0298\u0296\3\2\2\2\u0298")
        buf.write("\u0299\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029b\7\b\2\2")
        buf.write("\u029b\u029c\7\t\2\2\u029cW\3\2\2\2\u029d\u029e\7\65\2")
        buf.write("\2\u029e\u029f\5L\'\2\u029f\u02a0\7\t\2\2\u02a0Y\3\2\2")
        buf.write("\2\u02a1\u02a2\7\30\2\2\u02a2\u02a3\7\t\2\2\u02a3[\3\2")
        buf.write("\2\2\u02a4\u02aa\7K\2\2\u02a5\u02a6\7\7\2\2\u02a6\u02a7")
        buf.write("\5\34\17\2\u02a7\u02a8\7\b\2\2\u02a8\u02ab\3\2\2\2\u02a9")
        buf.write("\u02ab\5\34\17\2\u02aa\u02a5\3\2\2\2\u02aa\u02a9\3\2\2")
        buf.write("\2\u02ab\u02ad\3\2\2\2\u02ac\u02ae\7\31\2\2\u02ad\u02ac")
        buf.write("\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02af\3\2\2\2\u02af")
        buf.write("\u02b0\7\4\2\2\u02b0\u02b1\5\26\f\2\u02b1\u02b7\7\6\2")
        buf.write("\2\u02b2\u02b3\7L\2\2\u02b3\u02b4\7\4\2\2\u02b4\u02b5")
        buf.write("\5\26\f\2\u02b5\u02b6\7\6\2\2\u02b6\u02b8\3\2\2\2\u02b7")
        buf.write("\u02b2\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8]\3\2\2\2\u02b9")
        buf.write("\u02ba\7K\2\2\u02ba\u02bb\5\34\17\2\u02bb\u02c1\7\31\2")
        buf.write("\2\u02bc\u02c2\5p9\2\u02bd\u02be\7\4\2\2\u02be\u02bf\5")
        buf.write("p9\2\u02bf\u02c0\7\6\2\2\u02c0\u02c2\3\2\2\2\u02c1\u02bc")
        buf.write("\3\2\2\2\u02c1\u02bd\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3")
        buf.write("\u02c9\7L\2\2\u02c4\u02ca\5p9\2\u02c5\u02c6\7\4\2\2\u02c6")
        buf.write("\u02c7\5p9\2\u02c7\u02c8\7\6\2\2\u02c8\u02ca\3\2\2\2\u02c9")
        buf.write("\u02c4\3\2\2\2\u02c9\u02c5\3\2\2\2\u02ca_\3\2\2\2\u02cb")
        buf.write("\u02d2\5b\62\2\u02cc\u02d2\5\66\34\2\u02cd\u02ce\7\7\2")
        buf.write("\2\u02ce\u02cf\5`\61\2\u02cf\u02d0\7\b\2\2\u02d0\u02d2")
        buf.write("\3\2\2\2\u02d1\u02cb\3\2\2\2\u02d1\u02cc\3\2\2\2\u02d1")
        buf.write("\u02cd\3\2\2\2\u02d2a\3\2\2\2\u02d3\u02d4\7K\2\2\u02d4")
        buf.write("\u02d5\5\34\17\2\u02d5\u02d6\7\31\2\2\u02d6\u02d7\5`\61")
        buf.write("\2\u02d7\u02d8\7L\2\2\u02d8\u02d9\5`\61\2\u02d9c\3\2\2")
        buf.write("\2\u02da\u02eb\5\u0090I\2\u02db\u02eb\5`\61\2\u02dc\u02dd")
        buf.write("\7\7\2\2\u02dd\u02e2\5\u0090I\2\u02de\u02df\7\20\2\2\u02df")
        buf.write("\u02e1\5\u0090I\2\u02e0\u02de\3\2\2\2\u02e1\u02e4\3\2")
        buf.write("\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e5")
        buf.write("\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e5\u02e6\7\b\2\2\u02e6")
        buf.write("\u02eb\3\2\2\2\u02e7\u02eb\5j\66\2\u02e8\u02eb\7`\2\2")
        buf.write("\u02e9\u02eb\5\u00a6T\2\u02ea\u02da\3\2\2\2\u02ea\u02db")
        buf.write("\3\2\2\2\u02ea\u02dc\3\2\2\2\u02ea\u02e7\3\2\2\2\u02ea")
        buf.write("\u02e8\3\2\2\2\u02ea\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2")
        buf.write("\u02ec\u02ea\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ede\3\2\2")
        buf.write("\2\u02ee\u02ef\7M\2\2\u02ef\u02f0\7`\2\2\u02f0\u02f1\7")
        buf.write("S\2\2\u02f1\u02f4\5\u00a0Q\2\u02f2\u02f3\t\5\2\2\u02f3")
        buf.write("\u02f5\5\34\17\2\u02f4\u02f2\3\2\2\2\u02f4\u02f5\3\2\2")
        buf.write("\2\u02f5\u02f6\3\2\2\2\u02f6\u02f7\5\24\13\2\u02f7\u02f8")
        buf.write("\7\4\2\2\u02f8\u02f9\5\26\f\2\u02f9\u02fa\7\6\2\2\u02fa")
        buf.write("g\3\2\2\2\u02fb\u0301\7N\2\2\u02fc\u02fd\7\7\2\2\u02fd")
        buf.write("\u02fe\5\34\17\2\u02fe\u02ff\7\b\2\2\u02ff\u0302\3\2\2")
        buf.write("\2\u0300\u0302\5\34\17\2\u0301\u02fc\3\2\2\2\u0301\u0300")
        buf.write("\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0304\5\24\13\2\u0304")
        buf.write("\u0305\7\4\2\2\u0305\u0306\5\26\f\2\u0306\u0307\7\6\2")
        buf.write("\2\u0307i\3\2\2\2\u0308\u030a\7`\2\2\u0309\u030b\7\33")
        buf.write("\2\2\u030a\u0309\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030c")
        buf.write("\3\2\2\2\u030c\u030d\7\7\2\2\u030d\u030e\5l\67\2\u030e")
        buf.write("\u030f\7\b\2\2\u030fk\3\2\2\2\u0310\u0313\5p9\2\u0311")
        buf.write("\u0313\5\u0090I\2\u0312\u0310\3\2\2\2\u0312\u0311\3\2")
        buf.write("\2\2\u0313\u031b\3\2\2\2\u0314\u0317\7\20\2\2\u0315\u0318")
        buf.write("\5p9\2\u0316\u0318\5\u0090I\2\u0317\u0315\3\2\2\2\u0317")
        buf.write("\u0316\3\2\2\2\u0318\u031a\3\2\2\2\u0319\u0314\3\2\2\2")
        buf.write("\u031a\u031d\3\2\2\2\u031b\u0319\3\2\2\2\u031b\u031c\3")
        buf.write("\2\2\2\u031cm\3\2\2\2\u031d\u031b\3\2\2\2\u031e\u031f")
        buf.write("\b8\1\2\u031f\u0320\5B\"\2\u0320\u0321\5n8\5\u0321\u0328")
        buf.write("\3\2\2\2\u0322\u0323\7\7\2\2\u0323\u0324\5n8\2\u0324\u0325")
        buf.write("\7\b\2\2\u0325\u0328\3\2\2\2\u0326\u0328\5r:\2\u0327\u031e")
        buf.write("\3\2\2\2\u0327\u0322\3\2\2\2\u0327\u0326\3\2\2\2\u0328")
        buf.write("\u0337\3\2\2\2\u0329\u032a\f\b\2\2\u032a\u032b\5\u00b8")
        buf.write("]\2\u032b\u032c\5n8\t\u032c\u0336\3\2\2\2\u032d\u032e")
        buf.write("\f\7\2\2\u032e\u032f\5\u00b6\\\2\u032f\u0330\5n8\b\u0330")
        buf.write("\u0336\3\2\2\2\u0331\u0332\f\6\2\2\u0332\u0333\5\u00b4")
        buf.write("[\2\u0333\u0334\5n8\7\u0334\u0336\3\2\2\2\u0335\u0329")
        buf.write("\3\2\2\2\u0335\u032d\3\2\2\2\u0335\u0331\3\2\2\2\u0336")
        buf.write("\u0339\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2")
        buf.write("\u0338o\3\2\2\2\u0339\u0337\3\2\2\2\u033a\u033b\b9\1\2")
        buf.write("\u033b\u033e\5^\60\2\u033c\u033e\5r:\2\u033d\u033a\3\2")
        buf.write("\2\2\u033d\u033c\3\2\2\2\u033e\u034d\3\2\2\2\u033f\u0340")
        buf.write("\f\6\2\2\u0340\u0341\5\u00b8]\2\u0341\u0342\5p9\7\u0342")
        buf.write("\u034c\3\2\2\2\u0343\u0344\f\5\2\2\u0344\u0345\5\u00b6")
        buf.write("\\\2\u0345\u0346\5p9\6\u0346\u034c\3\2\2\2\u0347\u0348")
        buf.write("\f\4\2\2\u0348\u0349\5\u00b4[\2\u0349\u034a\5p9\5\u034a")
        buf.write("\u034c\3\2\2\2\u034b\u033f\3\2\2\2\u034b\u0343\3\2\2\2")
        buf.write("\u034b\u0347\3\2\2\2\u034c\u034f\3\2\2\2\u034d\u034b\3")
        buf.write("\2\2\2\u034d\u034e\3\2\2\2\u034eq\3\2\2\2\u034f\u034d")
        buf.write("\3\2\2\2\u0350\u0366\5\u00aaV\2\u0351\u0366\7`\2\2\u0352")
        buf.write("\u0353\7=\2\2\u0353\u0366\5r:\2\u0354\u0366\5\u00ba^\2")
        buf.write("\u0355\u0356\7\7\2\2\u0356\u0357\5p9\2\u0357\u0358\7\b")
        buf.write("\2\2\u0358\u0366\3\2\2\2\u0359\u0366\5j\66\2\u035a\u0366")
        buf.write("\5|?\2\u035b\u0366\5t;\2\u035c\u0366\5v<\2\u035d\u0366")
        buf.write("\5x=\2\u035e\u0366\5~@\2\u035f\u0366\5\u0080A\2\u0360")
        buf.write("\u0366\5z>\2\u0361\u0366\5\u0084C\2\u0362\u0366\5\u00a8")
        buf.write("U\2\u0363\u0366\5\u0082B\2\u0364\u0366\5\u0086D\2\u0365")
        buf.write("\u0350\3\2\2\2\u0365\u0351\3\2\2\2\u0365\u0352\3\2\2\2")
        buf.write("\u0365\u0354\3\2\2\2\u0365\u0355\3\2\2\2\u0365\u0359\3")
        buf.write("\2\2\2\u0365\u035a\3\2\2\2\u0365\u035b\3\2\2\2\u0365\u035c")
        buf.write("\3\2\2\2\u0365\u035d\3\2\2\2\u0365\u035e\3\2\2\2\u0365")
        buf.write("\u035f\3\2\2\2\u0365\u0360\3\2\2\2\u0365\u0361\3\2\2\2")
        buf.write("\u0365\u0362\3\2\2\2\u0365\u0363\3\2\2\2\u0365\u0364\3")
        buf.write("\2\2\2\u0366s\3\2\2\2\u0367\u036a\7\34\2\2\u0368\u0369")
        buf.write("\7A\2\2\u0369\u036b\5\u00aaV\2\u036a\u0368\3\2\2\2\u036a")
        buf.write("\u036b\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036d\7\7\2\2")
        buf.write("\u036d\u036e\5p9\2\u036e\u036f\7\b\2\2\u036f\u0373\3\2")
        buf.write("\2\2\u0370\u0371\7\34\2\2\u0371\u0373\5r:\2\u0372\u0367")
        buf.write("\3\2\2\2\u0372\u0370\3\2\2\2\u0373u\3\2\2\2\u0374\u0377")
        buf.write("\7\35\2\2\u0375\u0376\7A\2\2\u0376\u0378\5\u00aaV\2\u0377")
        buf.write("\u0375\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u0379\3\2\2\2")
        buf.write("\u0379\u037a\7\7\2\2\u037a\u037b\5p9\2\u037b\u037c\7\b")
        buf.write("\2\2\u037c\u0380\3\2\2\2\u037d\u037e\7\35\2\2\u037e\u0380")
        buf.write("\5r:\2\u037f\u0374\3\2\2\2\u037f\u037d\3\2\2\2\u0380w")
        buf.write("\3\2\2\2\u0381\u0384\7\36\2\2\u0382\u0383\7A\2\2\u0383")
        buf.write("\u0385\5\u00aaV\2\u0384\u0382\3\2\2\2\u0384\u0385\3\2")
        buf.write("\2\2\u0385\u0386\3\2\2\2\u0386\u0387\7\7\2\2\u0387\u0388")
        buf.write("\5p9\2\u0388\u0389\7\b\2\2\u0389\u038d\3\2\2\2\u038a\u038b")
        buf.write("\7\36\2\2\u038b\u038d\5r:\2\u038c\u0381\3\2\2\2\u038c")
        buf.write("\u038a\3\2\2\2\u038dy\3\2\2\2\u038e\u038f\7\n\2\2\u038f")
        buf.write("\u0390\7\7\2\2\u0390\u0391\5p9\2\u0391\u0392\7\b\2\2\u0392")
        buf.write("{\3\2\2\2\u0393\u0394\7\37\2\2\u0394\u0395\5p9\2\u0395")
        buf.write("\u0396\7\37\2\2\u0396}\3\2\2\2\u0397\u0398\t\6\2\2\u0398")
        buf.write("\u0399\7\7\2\2\u0399\u039c\5p9\2\u039a\u039b\7\20\2\2")
        buf.write("\u039b\u039d\5p9\2\u039c\u039a\3\2\2\2\u039c\u039d\3\2")
        buf.write("\2\2\u039d\u03a0\3\2\2\2\u039e\u039f\7\20\2\2\u039f\u03a1")
        buf.write("\5p9\2\u03a0\u039e\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2")
        buf.write("\3\2\2\2\u03a2\u03a3\7\b\2\2\u03a3\177\3\2\2\2\u03a4\u03a5")
        buf.write("\7\"\2\2\u03a5\u03a6\7\7\2\2\u03a6\u03a7\5p9\2\u03a7\u03a8")
        buf.write("\7\b\2\2\u03a8\u0081\3\2\2\2\u03a9\u03aa\7#\2\2\u03aa")
        buf.write("\u03ab\7\7\2\2\u03ab\u03ac\5p9\2\u03ac\u03ad\7\b\2\2\u03ad")
        buf.write("\u0083\3\2\2\2\u03ae\u03b7\7$\2\2\u03af\u03b4\5p9\2\u03b0")
        buf.write("\u03b1\7\20\2\2\u03b1\u03b3\5p9\2\u03b2\u03b0\3\2\2\2")
        buf.write("\u03b3\u03b6\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b4\u03b5\3")
        buf.write("\2\2\2\u03b5\u03b8\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b7\u03af")
        buf.write("\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write("\u03ba\7%\2\2\u03ba\u0085\3\2\2\2\u03bb\u03be\7`\2\2\u03bc")
        buf.write("\u03bd\7C\2\2\u03bd\u03bf\7`\2\2\u03be\u03bc\3\2\2\2\u03bf")
        buf.write("\u03c0\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2")
        buf.write("\u03c1\u0087\3\2\2\2\u03c2\u03c9\7H\2\2\u03c3\u03c9\7")
        buf.write("I\2\2\u03c4\u03c9\7J\2\2\u03c5\u03c9\5\u008aF\2\u03c6")
        buf.write("\u03c9\5\u008cG\2\u03c7\u03c9\7`\2\2\u03c8\u03c2\3\2\2")
        buf.write("\2\u03c8\u03c3\3\2\2\2\u03c8\u03c4\3\2\2\2\u03c8\u03c5")
        buf.write("\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c7\3\2\2\2\u03c9")
        buf.write("\u0089\3\2\2\2\u03ca\u03cc\7Q\2\2\u03cb\u03cd\7\33\2\2")
        buf.write("\u03cc\u03cb\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03ce\3")
        buf.write("\2\2\2\u03ce\u03d4\7\7\2\2\u03cf\u03d5\5L\'\2\u03d0\u03d1")
        buf.write("\7\7\2\2\u03d1\u03d2\5\u0096L\2\u03d2\u03d3\7\b\2\2\u03d3")
        buf.write("\u03d5\3\2\2\2\u03d4\u03cf\3\2\2\2\u03d4\u03d0\3\2\2\2")
        buf.write("\u03d5\u03d6\3\2\2\2\u03d6\u03d7\7^\2\2\u03d7\u03d8\5")
        buf.write("~@\2\u03d8\u03d9\5\u008eH\2\u03d9\u03da\7\b\2\2\u03da")
        buf.write("\u040c\3\2\2\2\u03db\u03dd\7Q\2\2\u03dc\u03de\7\33\2\2")
        buf.write("\u03dd\u03dc\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03df\3")
        buf.write("\2\2\2\u03df\u03e5\7\7\2\2\u03e0\u03e6\5L\'\2\u03e1\u03e2")
        buf.write("\7\7\2\2\u03e2\u03e3\5\u0096L\2\u03e3\u03e4\7\b\2\2\u03e4")
        buf.write("\u03e6\3\2\2\2\u03e5\u03e0\3\2\2\2\u03e5\u03e1\3\2\2\2")
        buf.write("\u03e6\u03e7\3\2\2\2\u03e7\u03e8\7^\2\2\u03e8\u03e9\5")
        buf.write("\u008eH\2\u03e9\u03ea\7\b\2\2\u03ea\u040c\3\2\2\2\u03eb")
        buf.write("\u03ed\7Q\2\2\u03ec\u03ee\7\33\2\2\u03ed\u03ec\3\2\2\2")
        buf.write("\u03ed\u03ee\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f5\7")
        buf.write("\7\2\2\u03f0\u03f6\5L\'\2\u03f1\u03f2\7\7\2\2\u03f2\u03f3")
        buf.write("\5\u0096L\2\u03f3\u03f4\7\b\2\2\u03f4\u03f6\3\2\2\2\u03f5")
        buf.write("\u03f0\3\2\2\2\u03f5\u03f1\3\2\2\2\u03f6\u03f7\3\2\2\2")
        buf.write("\u03f7\u03f8\7^\2\2\u03f8\u03f9\5~@\2\u03f9\u03fa\7\b")
        buf.write("\2\2\u03fa\u040c\3\2\2\2\u03fb\u03fd\7Q\2\2\u03fc\u03fe")
        buf.write("\7\33\2\2\u03fd\u03fc\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe")
        buf.write("\u03ff\3\2\2\2\u03ff\u0405\7\7\2\2\u0400\u0406\5L\'\2")
        buf.write("\u0401\u0402\7\7\2\2\u0402\u0403\5\u0096L\2\u0403\u0404")
        buf.write("\7\b\2\2\u0404\u0406\3\2\2\2\u0405\u0400\3\2\2\2\u0405")
        buf.write("\u0401\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0408\7^\2\2")
        buf.write("\u0408\u0409\5\u0080A\2\u0409\u040a\7\b\2\2\u040a\u040c")
        buf.write("\3\2\2\2\u040b\u03ca\3\2\2\2\u040b\u03db\3\2\2\2\u040b")
        buf.write("\u03eb\3\2\2\2\u040b\u03fb\3\2\2\2\u040c\u008b\3\2\2\2")
        buf.write("\u040d\u040e\7&\2\2\u040e\u040f\7\7\2\2\u040f\u0410\5")
        buf.write("\u0088E\2\u0410\u0411\7\20\2\2\u0411\u0412\5p9\2\u0412")
        buf.write("\u0413\7\20\2\2\u0413\u0414\5p9\2\u0414\u0415\7\b\2\2")
        buf.write("\u0415\u008d\3\2\2\2\u0416\u0418\5\u0090I\2\u0417\u0416")
        buf.write("\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u0417\3\2\2\2\u0419")
        buf.write("\u041a\3\2\2\2\u041a\u008f\3\2\2\2\u041b\u041d\7=\2\2")
        buf.write("\u041c\u041b\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041e\3")
        buf.write("\2\2\2\u041e\u041f\7\37\2\2\u041f\u0424\5\u0094K\2\u0420")
        buf.write("\u0421\7\20\2\2\u0421\u0423\5\u0094K\2\u0422\u0420\3\2")
        buf.write("\2\2\u0423\u0426\3\2\2\2\u0424\u0422\3\2\2\2\u0424\u0425")
        buf.write("\3\2\2\2\u0425\u0427\3\2\2\2\u0426\u0424\3\2\2\2\u0427")
        buf.write("\u0428\7R\2\2\u0428\u042c\3\2\2\2\u0429\u042a\7\16\2\2")
        buf.write("\u042a\u042c\5p9\2\u042b\u041c\3\2\2\2\u042b\u0429\3\2")
        buf.write("\2\2\u042c\u0091\3\2\2\2\u042d\u042e\5B\"\2\u042e\u042f")
        buf.write("\5p9\2\u042f\u0093\3\2\2\2\u0430\u0434\5p9\2\u0431\u0434")
        buf.write("\5\u00b4[\2\u0432\u0434\5\u0092J\2\u0433\u0430\3\2\2\2")
        buf.write("\u0433\u0431\3\2\2\2\u0433\u0432\3\2\2\2\u0434\u0095\3")
        buf.write("\2\2\2\u0435\u043a\5\u0098M\2\u0436\u0437\7\20\2\2\u0437")
        buf.write("\u0439\5\u0098M\2\u0438\u0436\3\2\2\2\u0439\u043c\3\2")
        buf.write("\2\2\u043a\u0438\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u0097")
        buf.write("\3\2\2\2\u043c\u043a\3\2\2\2\u043d\u043e\7`\2\2\u043e")
        buf.write("\u043f\7\5\2\2\u043f\u0440\5\u00acW\2\u0440\u0099\3\2")
        buf.write("\2\2\u0441\u0446\5\u009cO\2\u0442\u0443\7\20\2\2\u0443")
        buf.write("\u0445\5\u009cO\2\u0444\u0442\3\2\2\2\u0445\u0448\3\2")
        buf.write("\2\2\u0446\u0444\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u009b")
        buf.write("\3\2\2\2\u0448\u0446\3\2\2\2\u0449\u044c\7`\2\2\u044a")
        buf.write("\u044b\7\5\2\2\u044b\u044d\5\u00acW\2\u044c\u044a\3\2")
        buf.write("\2\2\u044c\u044d\3\2\2\2\u044d\u009d\3\2\2\2\u044e\u0453")
        buf.write("\5\u00a8U\2\u044f\u0450\7\20\2\2\u0450\u0452\5\u00a8U")
        buf.write("\2\u0451\u044f\3\2\2\2\u0452\u0455\3\2\2\2\u0453\u0451")
        buf.write("\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u009f\3\2\2\2\u0455")
        buf.write("\u0453\3\2\2\2\u0456\u0457\7$\2\2\u0457\u0458\5p9\2\u0458")
        buf.write("\u0459\7\20\2\2\u0459\u045a\5p9\2\u045a\u045b\7\b\2\2")
        buf.write("\u045b\u00a1\3\2\2\2\u045c\u045d\7$\2\2\u045d\u045e\5")
        buf.write("p9\2\u045e\u045f\7%\2\2\u045f\u00a3\3\2\2\2\u0460\u0462")
        buf.write("\7$\2\2\u0461\u0463\5p9\2\u0462\u0461\3\2\2\2\u0462\u0463")
        buf.write("\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0466\7\'\2\2\u0465")
        buf.write("\u0467\5p9\2\u0466\u0465\3\2\2\2\u0466\u0467\3\2\2\2\u0467")
        buf.write("\u0468\3\2\2\2\u0468\u0469\7%\2\2\u0469\u00a5\3\2\2\2")
        buf.write("\u046a\u046b\7`\2\2\u046b\u046c\5\u00a2R\2\u046c\u00a7")
        buf.write("\3\2\2\2\u046d\u0470\7`\2\2\u046e\u0470\5j\66\2\u046f")
        buf.write("\u046d\3\2\2\2\u046f\u046e\3\2\2\2\u0470\u0474\3\2\2\2")
        buf.write("\u0471\u0475\5\u00a2R\2\u0472\u0475\5\u00a0Q\2\u0473\u0475")
        buf.write("\5\u00a4S\2\u0474\u0471\3\2\2\2\u0474\u0472\3\2\2\2\u0474")
        buf.write("\u0473\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u0474\3\2\2\2")
        buf.write("\u0476\u0477\3\2\2\2\u0477\u00a9\3\2\2\2\u0478\u047c\7")
        buf.write("_\2\2\u0479\u047a\7=\2\2\u047a\u047c\7_\2\2\u047b\u0478")
        buf.write("\3\2\2\2\u047b\u0479\3\2\2\2\u047c\u00ab\3\2\2\2\u047d")
        buf.write("\u0490\5\u00aeX\2\u047e\u048b\5\u00aeX\2\u047f\u0480\7")
        buf.write("\7\2\2\u0480\u0485\5\u00aeX\2\u0481\u0482\7\20\2\2\u0482")
        buf.write("\u0484\5\u00aeX\2\u0483\u0481\3\2\2\2\u0484\u0487\3\2")
        buf.write("\2\2\u0485\u0483\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u0488")
        buf.write("\3\2\2\2\u0487\u0485\3\2\2\2\u0488\u0489\7\b\2\2\u0489")
        buf.write("\u048b\3\2\2\2\u048a\u047e\3\2\2\2\u048a\u047f\3\2\2\2")
        buf.write("\u048b\u048c\3\2\2\2\u048c\u048d\7(\2\2\u048d\u048e\5")
        buf.write("\u00acW\2\u048e\u0490\3\2\2\2\u048f\u047d\3\2\2\2\u048f")
        buf.write("\u048a\3\2\2\2\u0490\u00ad\3\2\2\2\u0491\u0492\bX\1\2")
        buf.write("\u0492\u04b1\7\67\2\2\u0493\u04b1\78\2\2\u0494\u04b1\7")
        buf.write("9\2\2\u0495\u04b1\7:\2\2\u0496\u04b1\7;\2\2\u0497\u0498")
        buf.write("\7$\2\2\u0498\u0499\5\u00aeX\2\u0499\u049a\7%\2\2\u049a")
        buf.write("\u04b1\3\2\2\2\u049b\u049c\7)\2\2\u049c\u049d\7\\\2\2")
        buf.write("\u049d\u049e\5\u00aeX\2\u049e\u049f\7]\2\2\u049f\u04b1")
        buf.write("\3\2\2\2\u04a0\u04a1\7*\2\2\u04a1\u04a2\7\\\2\2\u04a2")
        buf.write("\u04a3\5\u00aeX\2\u04a3\u04a4\7]\2\2\u04a4\u04b1\3\2\2")
        buf.write("\2\u04a5\u04a6\7$\2\2\u04a6\u04a7\5\u00aeX\2\u04a7\u04a8")
        buf.write("\7\20\2\2\u04a8\u04a9\5p9\2\u04a9\u04aa\7%\2\2\u04aa\u04b1")
        buf.write("\3\2\2\2\u04ab\u04ac\7+\2\2\u04ac\u04ad\7$\2\2\u04ad\u04ae")
        buf.write("\5p9\2\u04ae\u04af\7%\2\2\u04af\u04b1\3\2\2\2\u04b0\u0491")
        buf.write("\3\2\2\2\u04b0\u0493\3\2\2\2\u04b0\u0494\3\2\2\2\u04b0")
        buf.write("\u0495\3\2\2\2\u04b0\u0496\3\2\2\2\u04b0\u0497\3\2\2\2")
        buf.write("\u04b0\u049b\3\2\2\2\u04b0\u04a0\3\2\2\2\u04b0\u04a5\3")
        buf.write("\2\2\2\u04b0\u04ab\3\2\2\2\u04b1\u04b9\3\2\2\2\u04b2\u04b3")
        buf.write("\f\4\2\2\u04b3\u04b4\7$\2\2\u04b4\u04b5\5p9\2\u04b5\u04b6")
        buf.write("\7%\2\2\u04b6\u04b8\3\2\2\2\u04b7\u04b2\3\2\2\2\u04b8")
        buf.write("\u04bb\3\2\2\2\u04b9\u04b7\3\2\2\2\u04b9\u04ba\3\2\2\2")
        buf.write("\u04ba\u00af\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bc\u04c6\7")
        buf.write("D\2\2\u04bd\u04c6\7E\2\2\u04be\u04c6\7G\2\2\u04bf\u04c0")
        buf.write("\7G\2\2\u04c0\u04c1\7\7\2\2\u04c1\u04c2\5p9\2\u04c2\u04c3")
        buf.write("\7\b\2\2\u04c3\u04c6\3\2\2\2\u04c4\u04c6\5\u00b2Z\2\u04c5")
        buf.write("\u04bc\3\2\2\2\u04c5\u04bd\3\2\2\2\u04c5\u04be\3\2\2\2")
        buf.write("\u04c5\u04bf\3\2\2\2\u04c5\u04c4\3\2\2\2\u04c6\u00b1\3")
        buf.write("\2\2\2\u04c7\u04ce\7F\2\2\u04c8\u04c9\7F\2\2\u04c9\u04ca")
        buf.write("\7\7\2\2\u04ca\u04cb\5\u00a8U\2\u04cb\u04cc\7\b\2\2\u04cc")
        buf.write("\u04ce\3\2\2\2\u04cd\u04c7\3\2\2\2\u04cd\u04c8\3\2\2\2")
        buf.write("\u04ce\u00b3\3\2\2\2\u04cf\u04d0\t\7\2\2\u04d0\u00b5\3")
        buf.write("\2\2\2\u04d1\u04d2\t\b\2\2\u04d2\u00b7\3\2\2\2\u04d3\u04d4")
        buf.write("\t\t\2\2\u04d4\u00b9\3\2\2\2\u04d5\u04d6\t\n\2\2\u04d6")
        buf.write("\u00bb\3\2\2\2y\u00bf\u00c8\u00cf\u00d7\u00de\u00e5\u00ed")
        buf.write("\u00f2\u00f6\u00fd\u0117\u0119\u0124\u0126\u012c\u013f")
        buf.write("\u0148\u014c\u0152\u0163\u016b\u017c\u0183\u018a\u0191")
        buf.write("\u019d\u01a6\u01ad\u01ba\u01bf\u01c3\u01d2\u01e3\u01ff")
        buf.write("\u0203\u0208\u020c\u0211\u0215\u021b\u0223\u022e\u0246")
        buf.write("\u0252\u0257\u025c\u0260\u0265\u026e\u027a\u0285\u028c")
        buf.write("\u0294\u0298\u02aa\u02ad\u02b7\u02c1\u02c9\u02d1\u02e2")
        buf.write("\u02ea\u02ec\u02f4\u0301\u030a\u0312\u0317\u031b\u0327")
        buf.write("\u0335\u0337\u033d\u034b\u034d\u0365\u036a\u0372\u0377")
        buf.write("\u037f\u0384\u038c\u039c\u03a0\u03b4\u03b7\u03c0\u03c8")
        buf.write("\u03cc\u03d4\u03dd\u03e5\u03ed\u03f5\u03fd\u0405\u040b")
        buf.write("\u0419\u041c\u0424\u042b\u0433\u043a\u0446\u044c\u0453")
        buf.write("\u0462\u0466\u046f\u0474\u0476\u047b\u0485\u048a\u048f")
        buf.write("\u04b0\u04b9\u04c5\u04cd")
        return buf.getvalue()


class ExpParser ( Parser ):

    grammarFileName = "Exp.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'method'", "'{'", "':'", "'}'", "'('", 
                     "')'", "';'", "'not'", "'==>'", "'::'", "'\u21A6'", 
                     "'\u2297'", "'part'", "','", "'on'", "'assert'", "'var'", 
                     "':='", "'*='", "'measure'", "'measA'", "'break'", 
                     "'then'", "'with'", "'^{-1}'", "'sin'", "'cos'", "'sqrt'", 
                     "'|'", "'\u03C9'", "'omega'", "'rot'", "'ket'", "'['", 
                     "']'", "'dis'", "'..'", "'->'", "'array'", "'set'", 
                     "'Q'", "'axiom'", "'function'", "'lemma'", "'predicate'", 
                     "'ensures'", "'requires'", "'decreases'", "'separates'", 
                     "'returns'", "'return'", "'forall'", "'nat'", "'real'", 
                     "'int'", "<INVALID>", "<INVALID>", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'^'", "<INVALID>", "'.'", "<INVALID>", 
                     "<INVALID>", "'aa'", "<INVALID>", "'H'", "'QFT'", "'RQFT'", 
                     "'if'", "'else'", "'for'", "'while'", "<INVALID>", 
                     "<INVALID>", "'\u03BB'", "'\u27E9'", "<INVALID>", "<INVALID>", 
                     "'invariant'", "'&&'", "'||'", "'>='", "'<='", "'=='", 
                     "'!='", "'<'", "'>'", "'=>'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "Axiom", "Function", "Lemma", 
                      "Predicate", "Ensures", "Requires", "Decreases", "Separates", 
                      "Returns", "Return", "Forall", "TNat", "TReal", "TInt", 
                      "TBool", "TBV", "TAdd", "TSub", "TMul", "TDiv", "TMod", 
                      "TExp", "TXor", "TDot", "Nor", "Had", "AA", "En", 
                      "SHad", "SQFT", "RQFT", "If", "Else", "For", "While", 
                      "TrueLiteral", "FalseLiteral", "TCl", "TKet", "TIn", 
                      "TSum", "Invariant", "And", "OR", "GE", "LE", "EQ", 
                      "NE", "LT", "GT", "ARROW", "Number", "ID", "Letter", 
                      "LetterOrDigit", "TInclude", "AT", "ELLIPSIS", "WS", 
                      "Comment", "Line_Comment" ]

    RULE_program = 0
    RULE_topLevel = 1
    RULE_method = 2
    RULE_function = 3
    RULE_lemma = 4
    RULE_predicate = 5
    RULE_returna = 6
    RULE_conds = 7
    RULE_reen = 8
    RULE_loopConds = 9
    RULE_stmts = 10
    RULE_stmt = 11
    RULE_spec = 12
    RULE_bexp = 13
    RULE_qbool = 14
    RULE_logicImply = 15
    RULE_allspec = 16
    RULE_logicOrExp = 17
    RULE_logicAndExp = 18
    RULE_logicNotExp = 19
    RULE_logicInExpr = 20
    RULE_chainBExp = 21
    RULE_comOp = 22
    RULE_qtypeCreate = 23
    RULE_qunspec = 24
    RULE_qspec = 25
    RULE_partspec = 26
    RULE_partpred = 27
    RULE_partsection = 28
    RULE_partsections = 29
    RULE_tensorall = 30
    RULE_sumspec = 31
    RULE_maySum = 32
    RULE_asserting = 33
    RULE_casting = 34
    RULE_varcreate = 35
    RULE_assigning = 36
    RULE_ids = 37
    RULE_idindices = 38
    RULE_qassign = 39
    RULE_qcreate = 40
    RULE_measure = 41
    RULE_measureAbort = 42
    RULE_returnStmt = 43
    RULE_breakStmt = 44
    RULE_ifexp = 45
    RULE_cifexp = 46
    RULE_ketArithExpr = 47
    RULE_ketCifexp = 48
    RULE_manyketpart = 49
    RULE_forexp = 50
    RULE_whileexp = 51
    RULE_fcall = 52
    RULE_arithExprsOrKets = 53
    RULE_arithExprWithSum = 54
    RULE_arithExpr = 55
    RULE_arithAtomic = 56
    RULE_sinExpr = 57
    RULE_cosExpr = 58
    RULE_sqrtExpr = 59
    RULE_notExpr = 60
    RULE_absExpr = 61
    RULE_omegaExpr = 62
    RULE_rotExpr = 63
    RULE_ketCallExpr = 64
    RULE_setInstance = 65
    RULE_memberAccess = 66
    RULE_expr = 67
    RULE_lambdaT = 68
    RULE_dis = 69
    RULE_manyket = 70
    RULE_ket = 71
    RULE_ketsum = 72
    RULE_qstate = 73
    RULE_bindings = 74
    RULE_binding = 75
    RULE_typeOptionalBindings = 76
    RULE_typeOptionalBinding = 77
    RULE_locus = 78
    RULE_crange = 79
    RULE_index = 80
    RULE_qslice = 81
    RULE_idindex = 82
    RULE_qrange = 83
    RULE_numexp = 84
    RULE_typeT = 85
    RULE_baseTy = 86
    RULE_qty = 87
    RULE_aaType = 88
    RULE_additiveOp = 89
    RULE_multiplicativeOp = 90
    RULE_exponentialOp = 91
    RULE_boolLiteral = 92

    ruleNames =  [ "program", "topLevel", "method", "function", "lemma", 
                   "predicate", "returna", "conds", "reen", "loopConds", 
                   "stmts", "stmt", "spec", "bexp", "qbool", "logicImply", 
                   "allspec", "logicOrExp", "logicAndExp", "logicNotExp", 
                   "logicInExpr", "chainBExp", "comOp", "qtypeCreate", "qunspec", 
                   "qspec", "partspec", "partpred", "partsection", "partsections", 
                   "tensorall", "sumspec", "maySum", "asserting", "casting", 
                   "varcreate", "assigning", "ids", "idindices", "qassign", 
                   "qcreate", "measure", "measureAbort", "returnStmt", "breakStmt", 
                   "ifexp", "cifexp", "ketArithExpr", "ketCifexp", "manyketpart", 
                   "forexp", "whileexp", "fcall", "arithExprsOrKets", "arithExprWithSum", 
                   "arithExpr", "arithAtomic", "sinExpr", "cosExpr", "sqrtExpr", 
                   "notExpr", "absExpr", "omegaExpr", "rotExpr", "ketCallExpr", 
                   "setInstance", "memberAccess", "expr", "lambdaT", "dis", 
                   "manyket", "ket", "ketsum", "qstate", "bindings", "binding", 
                   "typeOptionalBindings", "typeOptionalBinding", "locus", 
                   "crange", "index", "qslice", "idindex", "qrange", "numexp", 
                   "typeT", "baseTy", "qty", "aaType", "additiveOp", "multiplicativeOp", 
                   "exponentialOp", "boolLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    Axiom=42
    Function=43
    Lemma=44
    Predicate=45
    Ensures=46
    Requires=47
    Decreases=48
    Separates=49
    Returns=50
    Return=51
    Forall=52
    TNat=53
    TReal=54
    TInt=55
    TBool=56
    TBV=57
    TAdd=58
    TSub=59
    TMul=60
    TDiv=61
    TMod=62
    TExp=63
    TXor=64
    TDot=65
    Nor=66
    Had=67
    AA=68
    En=69
    SHad=70
    SQFT=71
    RQFT=72
    If=73
    Else=74
    For=75
    While=76
    TrueLiteral=77
    FalseLiteral=78
    TCl=79
    TKet=80
    TIn=81
    TSum=82
    Invariant=83
    And=84
    OR=85
    GE=86
    LE=87
    EQ=88
    NE=89
    LT=90
    GT=91
    ARROW=92
    Number=93
    ID=94
    Letter=95
    LetterOrDigit=96
    TInclude=97
    AT=98
    ELLIPSIS=99
    WS=100
    Comment=101
    Line_Comment=102

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ExpParser.EOF, 0)

        def topLevel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.TopLevelContext)
            else:
                return self.getTypedRuleContext(ExpParser.TopLevelContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = ExpParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 186
                self.topLevel()
                self.state = 189 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ExpParser.T__0) | (1 << ExpParser.Function) | (1 << ExpParser.Lemma) | (1 << ExpParser.Predicate))) != 0) or _la==ExpParser.TInclude):
                    break

            self.state = 191
            self.match(ExpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TInclude(self):
            return self.getToken(ExpParser.TInclude, 0)

        def method(self):
            return self.getTypedRuleContext(ExpParser.MethodContext,0)


        def function(self):
            return self.getTypedRuleContext(ExpParser.FunctionContext,0)


        def lemma(self):
            return self.getTypedRuleContext(ExpParser.LemmaContext,0)


        def predicate(self):
            return self.getTypedRuleContext(ExpParser.PredicateContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_topLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevel" ):
                listener.enterTopLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevel" ):
                listener.exitTopLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevel" ):
                return visitor.visitTopLevel(self)
            else:
                return visitor.visitChildren(self)




    def topLevel(self):

        localctx = ExpParser.TopLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevel)
        try:
            self.state = 198
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ExpParser.TInclude]:
                self.enterOuterAlt(localctx, 1)
                self.state = 193
                self.match(ExpParser.TInclude)
                pass
            elif token in [ExpParser.T__0]:
                self.enterOuterAlt(localctx, 2)
                self.state = 194
                self.method()
                pass
            elif token in [ExpParser.Function]:
                self.enterOuterAlt(localctx, 3)
                self.state = 195
                self.function()
                pass
            elif token in [ExpParser.Lemma]:
                self.enterOuterAlt(localctx, 4)
                self.state = 196
                self.lemma()
                pass
            elif token in [ExpParser.Predicate]:
                self.enterOuterAlt(localctx, 5)
                self.state = 197
                self.predicate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def bindings(self):
            return self.getTypedRuleContext(ExpParser.BindingsContext,0)


        def conds(self):
            return self.getTypedRuleContext(ExpParser.CondsContext,0)


        def Axiom(self):
            return self.getToken(ExpParser.Axiom, 0)

        def Returns(self):
            return self.getToken(ExpParser.Returns, 0)

        def returna(self):
            return self.getTypedRuleContext(ExpParser.ReturnaContext,0)


        def stmts(self):
            return self.getTypedRuleContext(ExpParser.StmtsContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod" ):
                listener.enterMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod" ):
                listener.exitMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod" ):
                return visitor.visitMethod(self)
            else:
                return visitor.visitChildren(self)




    def method(self):

        localctx = ExpParser.MethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self.match(ExpParser.T__0)
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__1:
                self.state = 201
                self.match(ExpParser.T__1)
                self.state = 202
                self.match(ExpParser.T__2)
                self.state = 203
                self.match(ExpParser.Axiom)
                self.state = 204
                self.match(ExpParser.T__3)


            self.state = 207
            self.match(ExpParser.ID)
            self.state = 208
            self.match(ExpParser.T__4)
            self.state = 209
            self.bindings()
            self.state = 210
            self.match(ExpParser.T__5)
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.Returns:
                self.state = 211
                self.match(ExpParser.Returns)
                self.state = 212
                self.returna()


            self.state = 215
            self.conds()
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__1:
                self.state = 216
                self.match(ExpParser.T__1)
                self.state = 217
                self.stmts()
                self.state = 218
                self.match(ExpParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function(self):
            return self.getToken(ExpParser.Function, 0)

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def bindings(self):
            return self.getTypedRuleContext(ExpParser.BindingsContext,0)


        def Axiom(self):
            return self.getToken(ExpParser.Axiom, 0)

        def typeT(self):
            return self.getTypedRuleContext(ExpParser.TypeTContext,0)


        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def qspec(self):
            return self.getTypedRuleContext(ExpParser.QspecContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction" ):
                listener.enterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction" ):
                listener.exitFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction" ):
                return visitor.visitFunction(self)
            else:
                return visitor.visitChildren(self)




    def function(self):

        localctx = ExpParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(ExpParser.Function)
            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__1:
                self.state = 223
                self.match(ExpParser.T__1)
                self.state = 224
                self.match(ExpParser.T__2)
                self.state = 225
                self.match(ExpParser.Axiom)
                self.state = 226
                self.match(ExpParser.T__3)


            self.state = 229
            self.match(ExpParser.ID)
            self.state = 230
            self.match(ExpParser.T__4)
            self.state = 231
            self.bindings()
            self.state = 232
            self.match(ExpParser.T__5)
            self.state = 235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__2:
                self.state = 233
                self.match(ExpParser.T__2)
                self.state = 234
                self.typeT()


            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__1:
                self.state = 237
                self.match(ExpParser.T__1)
                self.state = 240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 238
                    self.arithExpr(0)
                    pass

                elif la_ == 2:
                    self.state = 239
                    self.qspec()
                    pass


                self.state = 242
                self.match(ExpParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LemmaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lemma(self):
            return self.getToken(ExpParser.Lemma, 0)

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def bindings(self):
            return self.getTypedRuleContext(ExpParser.BindingsContext,0)


        def conds(self):
            return self.getTypedRuleContext(ExpParser.CondsContext,0)


        def Axiom(self):
            return self.getToken(ExpParser.Axiom, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_lemma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLemma" ):
                listener.enterLemma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLemma" ):
                listener.exitLemma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLemma" ):
                return visitor.visitLemma(self)
            else:
                return visitor.visitChildren(self)




    def lemma(self):

        localctx = ExpParser.LemmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_lemma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(ExpParser.Lemma)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__1:
                self.state = 247
                self.match(ExpParser.T__1)
                self.state = 248
                self.match(ExpParser.T__2)
                self.state = 249
                self.match(ExpParser.Axiom)
                self.state = 250
                self.match(ExpParser.T__3)


            self.state = 253
            self.match(ExpParser.ID)
            self.state = 254
            self.match(ExpParser.T__4)
            self.state = 255
            self.bindings()
            self.state = 256
            self.match(ExpParser.T__5)
            self.state = 257
            self.conds()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Predicate(self):
            return self.getToken(ExpParser.Predicate, 0)

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def bindings(self):
            return self.getTypedRuleContext(ExpParser.BindingsContext,0)


        def qspec(self):
            return self.getTypedRuleContext(ExpParser.QspecContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = ExpParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(ExpParser.Predicate)
            self.state = 260
            self.match(ExpParser.ID)
            self.state = 261
            self.match(ExpParser.T__4)
            self.state = 262
            self.bindings()
            self.state = 263
            self.match(ExpParser.T__5)
            self.state = 264
            self.match(ExpParser.T__1)
            self.state = 265
            self.qspec()
            self.state = 266
            self.match(ExpParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindings(self):
            return self.getTypedRuleContext(ExpParser.BindingsContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_returna

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturna" ):
                listener.enterReturna(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturna" ):
                listener.exitReturna(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturna" ):
                return visitor.visitReturna(self)
            else:
                return visitor.visitChildren(self)




    def returna(self):

        localctx = ExpParser.ReturnaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_returna)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.match(ExpParser.T__4)
            self.state = 269
            self.bindings()
            self.state = 270
            self.match(ExpParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ReenContext)
            else:
                return self.getTypedRuleContext(ExpParser.ReenContext,i)


        def spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.SpecContext)
            else:
                return self.getTypedRuleContext(ExpParser.SpecContext,i)


        def Decreases(self, i:int=None):
            if i is None:
                return self.getTokens(ExpParser.Decreases)
            else:
                return self.getToken(ExpParser.Decreases, i)

        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_conds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConds" ):
                listener.enterConds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConds" ):
                listener.exitConds(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConds" ):
                return visitor.visitConds(self)
            else:
                return visitor.visitChildren(self)




    def conds(self):

        localctx = ExpParser.CondsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_conds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ExpParser.Ensures) | (1 << ExpParser.Requires) | (1 << ExpParser.Decreases))) != 0):
                self.state = 277
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ExpParser.Ensures, ExpParser.Requires]:
                    self.state = 272
                    self.reen()
                    self.state = 273
                    self.spec()
                    pass
                elif token in [ExpParser.Decreases]:
                    self.state = 275
                    self.match(ExpParser.Decreases)
                    self.state = 276
                    self.arithExpr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ensures(self):
            return self.getToken(ExpParser.Ensures, 0)

        def Requires(self):
            return self.getToken(ExpParser.Requires, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_reen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReen" ):
                listener.enterReen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReen" ):
                listener.exitReen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReen" ):
                return visitor.visitReen(self)
            else:
                return visitor.visitChildren(self)




    def reen(self):

        localctx = ExpParser.ReenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_reen)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            _la = self._input.LA(1)
            if not(_la==ExpParser.Ensures or _la==ExpParser.Requires):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopCondsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Invariant(self, i:int=None):
            if i is None:
                return self.getTokens(ExpParser.Invariant)
            else:
                return self.getToken(ExpParser.Invariant, i)

        def spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.SpecContext)
            else:
                return self.getTypedRuleContext(ExpParser.SpecContext,i)


        def Decreases(self, i:int=None):
            if i is None:
                return self.getTokens(ExpParser.Decreases)
            else:
                return self.getToken(ExpParser.Decreases, i)

        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def Separates(self, i:int=None):
            if i is None:
                return self.getTokens(ExpParser.Separates)
            else:
                return self.getToken(ExpParser.Separates, i)

        def locus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.LocusContext)
            else:
                return self.getTypedRuleContext(ExpParser.LocusContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_loopConds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopConds" ):
                listener.enterLoopConds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopConds" ):
                listener.exitLoopConds(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopConds" ):
                return visitor.visitLoopConds(self)
            else:
                return visitor.visitChildren(self)




    def loopConds(self):

        localctx = ExpParser.LoopCondsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_loopConds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (ExpParser.Decreases - 48)) | (1 << (ExpParser.Separates - 48)) | (1 << (ExpParser.Invariant - 48)))) != 0):
                self.state = 290
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ExpParser.Invariant]:
                    self.state = 284
                    self.match(ExpParser.Invariant)
                    self.state = 285
                    self.spec()
                    pass
                elif token in [ExpParser.Decreases]:
                    self.state = 286
                    self.match(ExpParser.Decreases)
                    self.state = 287
                    self.arithExpr(0)
                    pass
                elif token in [ExpParser.Separates]:
                    self.state = 288
                    self.match(ExpParser.Separates)
                    self.state = 289
                    self.locus()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.StmtContext)
            else:
                return self.getTypedRuleContext(ExpParser.StmtContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_stmts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmts" ):
                listener.enterStmts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmts" ):
                listener.exitStmts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmts" ):
                return visitor.visitStmts(self)
            else:
                return visitor.visitChildren(self)




    def stmts(self):

        localctx = ExpParser.StmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ExpParser.T__4) | (1 << ExpParser.T__15) | (1 << ExpParser.T__16) | (1 << ExpParser.T__21) | (1 << ExpParser.Return))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ExpParser.If - 73)) | (1 << (ExpParser.For - 73)) | (1 << (ExpParser.While - 73)) | (1 << (ExpParser.ID - 73)))) != 0):
                self.state = 295
                self.stmt()
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asserting(self):
            return self.getTypedRuleContext(ExpParser.AssertingContext,0)


        def casting(self):
            return self.getTypedRuleContext(ExpParser.CastingContext,0)


        def varcreate(self):
            return self.getTypedRuleContext(ExpParser.VarcreateContext,0)


        def assigning(self):
            return self.getTypedRuleContext(ExpParser.AssigningContext,0)


        def qassign(self):
            return self.getTypedRuleContext(ExpParser.QassignContext,0)


        def qcreate(self):
            return self.getTypedRuleContext(ExpParser.QcreateContext,0)


        def measure(self):
            return self.getTypedRuleContext(ExpParser.MeasureContext,0)


        def measureAbort(self):
            return self.getTypedRuleContext(ExpParser.MeasureAbortContext,0)


        def ifexp(self):
            return self.getTypedRuleContext(ExpParser.IfexpContext,0)


        def forexp(self):
            return self.getTypedRuleContext(ExpParser.ForexpContext,0)


        def whileexp(self):
            return self.getTypedRuleContext(ExpParser.WhileexpContext,0)


        def fcall(self):
            return self.getTypedRuleContext(ExpParser.FcallContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(ExpParser.ReturnStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(ExpParser.BreakStmtContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = ExpParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_stmt)
        try:
            self.state = 317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 301
                self.asserting()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 302
                self.casting()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 303
                self.varcreate()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 304
                self.assigning()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 305
                self.qassign()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 306
                self.qcreate()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 307
                self.measure()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 308
                self.measureAbort()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 309
                self.ifexp()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 310
                self.forexp()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 311
                self.whileexp()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 312
                self.fcall()
                self.state = 313
                self.match(ExpParser.T__6)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 315
                self.returnStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 316
                self.breakStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qunspec(self):
            return self.getTypedRuleContext(ExpParser.QunspecContext,0)


        def logicImply(self):
            return self.getTypedRuleContext(ExpParser.LogicImplyContext,0)


        def chainBExp(self):
            return self.getTypedRuleContext(ExpParser.ChainBExpContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpec" ):
                listener.enterSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpec" ):
                listener.exitSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpec" ):
                return visitor.visitSpec(self)
            else:
                return visitor.visitChildren(self)




    def spec(self):

        localctx = ExpParser.SpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_spec)
        try:
            self.state = 330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 319
                self.qunspec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.logicImply()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 321
                self.chainBExp()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 322
                self.match(ExpParser.T__1)
                self.state = 326
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 323
                    self.qunspec()
                    pass

                elif la_ == 2:
                    self.state = 324
                    self.logicImply()
                    pass

                elif la_ == 3:
                    self.state = 325
                    self.chainBExp()
                    pass


                self.state = 328
                self.match(ExpParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BexpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicOrExp(self):
            return self.getTypedRuleContext(ExpParser.LogicOrExpContext,0)


        def qbool(self):
            return self.getTypedRuleContext(ExpParser.QboolContext,0)


        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def boolLiteral(self):
            return self.getTypedRuleContext(ExpParser.BoolLiteralContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_bexp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBexp" ):
                listener.enterBexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBexp" ):
                listener.exitBexp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBexp" ):
                return visitor.visitBexp(self)
            else:
                return visitor.visitChildren(self)




    def bexp(self):

        localctx = ExpParser.BexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_bexp)
        try:
            self.state = 336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 332
                self.logicOrExp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 333
                self.qbool()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 334
                self.match(ExpParser.ID)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 335
                self.boolLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QboolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qrange(self):
            return self.getTypedRuleContext(ExpParser.QrangeContext,0)


        def locus(self):
            return self.getTypedRuleContext(ExpParser.LocusContext,0)


        def comOp(self):
            return self.getTypedRuleContext(ExpParser.ComOpContext,0)


        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def AT(self):
            return self.getToken(ExpParser.AT, 0)

        def idindex(self):
            return self.getTypedRuleContext(ExpParser.IdindexContext,0)


        def qbool(self):
            return self.getTypedRuleContext(ExpParser.QboolContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_qbool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQbool" ):
                listener.enterQbool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQbool" ):
                listener.exitQbool(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQbool" ):
                return visitor.visitQbool(self)
            else:
                return visitor.visitChildren(self)




    def qbool(self):

        localctx = ExpParser.QboolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_qbool)
        try:
            self.state = 353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.qrange()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.match(ExpParser.T__1)
                self.state = 340
                self.locus()
                self.state = 341
                self.match(ExpParser.T__3)
                self.state = 342
                self.comOp()
                self.state = 343
                self.arithExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 345
                self.arithExpr(0)
                self.state = 346
                self.comOp()
                self.state = 347
                self.arithExpr(0)
                self.state = 348
                self.match(ExpParser.AT)
                self.state = 349
                self.idindex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 351
                self.match(ExpParser.T__7)
                self.state = 352
                self.qbool()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicImplyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allspec(self):
            return self.getTypedRuleContext(ExpParser.AllspecContext,0)


        def logicImply(self):
            return self.getTypedRuleContext(ExpParser.LogicImplyContext,0)


        def qunspec(self):
            return self.getTypedRuleContext(ExpParser.QunspecContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_logicImply

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicImply" ):
                listener.enterLogicImply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicImply" ):
                listener.exitLogicImply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicImply" ):
                return visitor.visitLogicImply(self)
            else:
                return visitor.visitChildren(self)




    def logicImply(self):

        localctx = ExpParser.LogicImplyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_logicImply)
        try:
            self.state = 361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 355
                self.allspec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 356
                self.allspec()
                self.state = 357
                self.match(ExpParser.T__8)
                self.state = 358
                self.logicImply()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 360
                self.qunspec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicOrExp(self):
            return self.getTypedRuleContext(ExpParser.LogicOrExpContext,0)


        def Forall(self):
            return self.getToken(ExpParser.Forall, 0)

        def typeOptionalBinding(self):
            return self.getTypedRuleContext(ExpParser.TypeOptionalBindingContext,0)


        def chainBExp(self):
            return self.getTypedRuleContext(ExpParser.ChainBExpContext,0)


        def logicImply(self):
            return self.getTypedRuleContext(ExpParser.LogicImplyContext,0)


        def TIn(self):
            return self.getToken(ExpParser.TIn, 0)

        def crange(self):
            return self.getTypedRuleContext(ExpParser.CrangeContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_allspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllspec" ):
                listener.enterAllspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllspec" ):
                listener.exitAllspec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllspec" ):
                return visitor.visitAllspec(self)
            else:
                return visitor.visitChildren(self)




    def allspec(self):

        localctx = ExpParser.AllspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_allspec)
        try:
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 363
                self.logicOrExp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 364
                self.match(ExpParser.Forall)
                self.state = 365
                self.typeOptionalBinding()
                self.state = 366
                self.match(ExpParser.T__9)
                self.state = 367
                self.chainBExp()
                self.state = 368
                self.match(ExpParser.T__8)
                self.state = 369
                self.logicImply()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 371
                self.match(ExpParser.Forall)
                self.state = 372
                self.typeOptionalBinding()
                self.state = 373
                self.match(ExpParser.TIn)
                self.state = 374
                self.crange()
                self.state = 375
                self.match(ExpParser.T__8)
                self.state = 376
                self.logicImply()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicOrExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicAndExp(self):
            return self.getTypedRuleContext(ExpParser.LogicAndExpContext,0)


        def OR(self):
            return self.getToken(ExpParser.OR, 0)

        def logicOrExp(self):
            return self.getTypedRuleContext(ExpParser.LogicOrExpContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_logicOrExp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicOrExp" ):
                listener.enterLogicOrExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicOrExp" ):
                listener.exitLogicOrExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicOrExp" ):
                return visitor.visitLogicOrExp(self)
            else:
                return visitor.visitChildren(self)




    def logicOrExp(self):

        localctx = ExpParser.LogicOrExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_logicOrExp)
        try:
            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 380
                self.logicAndExp()
                self.state = 381
                self.match(ExpParser.OR)
                self.state = 382
                self.logicOrExp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 384
                self.logicAndExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicAndExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicNotExp(self):
            return self.getTypedRuleContext(ExpParser.LogicNotExpContext,0)


        def And(self):
            return self.getToken(ExpParser.And, 0)

        def logicAndExp(self):
            return self.getTypedRuleContext(ExpParser.LogicAndExpContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_logicAndExp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicAndExp" ):
                listener.enterLogicAndExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicAndExp" ):
                listener.exitLogicAndExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicAndExp" ):
                return visitor.visitLogicAndExp(self)
            else:
                return visitor.visitChildren(self)




    def logicAndExp(self):

        localctx = ExpParser.LogicAndExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_logicAndExp)
        try:
            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 387
                self.logicNotExp()
                self.state = 388
                self.match(ExpParser.And)
                self.state = 389
                self.logicAndExp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 391
                self.logicNotExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicNotExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicNotExp(self):
            return self.getTypedRuleContext(ExpParser.LogicNotExpContext,0)


        def fcall(self):
            return self.getTypedRuleContext(ExpParser.FcallContext,0)


        def chainBExp(self):
            return self.getTypedRuleContext(ExpParser.ChainBExpContext,0)


        def logicInExpr(self):
            return self.getTypedRuleContext(ExpParser.LogicInExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_logicNotExp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicNotExp" ):
                listener.enterLogicNotExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicNotExp" ):
                listener.exitLogicNotExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicNotExp" ):
                return visitor.visitLogicNotExp(self)
            else:
                return visitor.visitChildren(self)




    def logicNotExp(self):

        localctx = ExpParser.LogicNotExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_logicNotExp)
        try:
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 394
                self.match(ExpParser.T__7)
                self.state = 395
                self.logicNotExp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 396
                self.fcall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 397
                self.chainBExp()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 398
                self.logicInExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicInExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(ExpParser.ID)
            else:
                return self.getToken(ExpParser.ID, i)

        def TIn(self):
            return self.getToken(ExpParser.TIn, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_logicInExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicInExpr" ):
                listener.enterLogicInExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicInExpr" ):
                listener.exitLogicInExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicInExpr" ):
                return visitor.visitLogicInExpr(self)
            else:
                return visitor.visitChildren(self)




    def logicInExpr(self):

        localctx = ExpParser.LogicInExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_logicInExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(ExpParser.ID)
            self.state = 402
            self.match(ExpParser.TIn)
            self.state = 403
            self.match(ExpParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChainBExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExprWithSum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprWithSumContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprWithSumContext,i)


        def comOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ComOpContext)
            else:
                return self.getTypedRuleContext(ExpParser.ComOpContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_chainBExp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainBExp" ):
                listener.enterChainBExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainBExp" ):
                listener.exitChainBExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChainBExp" ):
                return visitor.visitChainBExp(self)
            else:
                return visitor.visitChildren(self)




    def chainBExp(self):

        localctx = ExpParser.ChainBExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_chainBExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.arithExprWithSum(0)
            self.state = 409 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 406
                self.comOp()
                self.state = 407
                self.arithExprWithSum(0)
                self.state = 411 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (ExpParser.GE - 86)) | (1 << (ExpParser.LE - 86)) | (1 << (ExpParser.EQ - 86)) | (1 << (ExpParser.NE - 86)) | (1 << (ExpParser.LT - 86)) | (1 << (ExpParser.GT - 86)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GE(self):
            return self.getToken(ExpParser.GE, 0)

        def LE(self):
            return self.getToken(ExpParser.LE, 0)

        def EQ(self):
            return self.getToken(ExpParser.EQ, 0)

        def NE(self):
            return self.getToken(ExpParser.NE, 0)

        def LT(self):
            return self.getToken(ExpParser.LT, 0)

        def GT(self):
            return self.getToken(ExpParser.GT, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_comOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComOp" ):
                listener.enterComOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComOp" ):
                listener.exitComOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComOp" ):
                return visitor.visitComOp(self)
            else:
                return visitor.visitChildren(self)




    def comOp(self):

        localctx = ExpParser.ComOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_comOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            _la = self._input.LA(1)
            if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (ExpParser.GE - 86)) | (1 << (ExpParser.LE - 86)) | (1 << (ExpParser.EQ - 86)) | (1 << (ExpParser.NE - 86)) | (1 << (ExpParser.LT - 86)) | (1 << (ExpParser.GT - 86)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QtypeCreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qty(self):
            return self.getTypedRuleContext(ExpParser.QtyContext,0)


        def qspec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.QspecContext)
            else:
                return self.getTypedRuleContext(ExpParser.QspecContext,i)


        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def TDot(self):
            return self.getToken(ExpParser.TDot, 0)

        def TAdd(self, i:int=None):
            if i is None:
                return self.getTokens(ExpParser.TAdd)
            else:
                return self.getToken(ExpParser.TAdd, i)

        def getRuleIndex(self):
            return ExpParser.RULE_qtypeCreate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQtypeCreate" ):
                listener.enterQtypeCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQtypeCreate" ):
                listener.exitQtypeCreate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQtypeCreate" ):
                return visitor.visitQtypeCreate(self)
            else:
                return visitor.visitChildren(self)




    def qtypeCreate(self):

        localctx = ExpParser.QtypeCreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_qtypeCreate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.qty()
            self.state = 416
            self.match(ExpParser.T__10)
            self.state = 420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 417
                self.arithExpr(0)
                self.state = 418
                self.match(ExpParser.TDot)


            self.state = 422
            self.qspec()
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ExpParser.TAdd:
                self.state = 423
                self.match(ExpParser.TAdd)
                self.state = 424
                self.qspec()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QunspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.LocusContext)
            else:
                return self.getTypedRuleContext(ExpParser.LocusContext,i)


        def qtypeCreate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.QtypeCreateContext)
            else:
                return self.getTypedRuleContext(ExpParser.QtypeCreateContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_qunspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQunspec" ):
                listener.enterQunspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQunspec" ):
                listener.exitQunspec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQunspec" ):
                return visitor.visitQunspec(self)
            else:
                return visitor.visitChildren(self)




    def qunspec(self):

        localctx = ExpParser.QunspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_qunspec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.locus()
            self.state = 431
            self.match(ExpParser.T__2)
            self.state = 432
            self.qtypeCreate()
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ExpParser.T__11:
                self.state = 433
                self.match(ExpParser.T__11)
                self.state = 434
                self.locus()
                self.state = 435
                self.match(ExpParser.T__2)
                self.state = 436
                self.qtypeCreate()
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tensorall(self):
            return self.getTypedRuleContext(ExpParser.TensorallContext,0)


        def manyketpart(self):
            return self.getTypedRuleContext(ExpParser.ManyketpartContext,0)


        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def sumspec(self):
            return self.getTypedRuleContext(ExpParser.SumspecContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_qspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQspec" ):
                listener.enterQspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQspec" ):
                listener.exitQspec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQspec" ):
                return visitor.visitQspec(self)
            else:
                return visitor.visitChildren(self)




    def qspec(self):

        localctx = ExpParser.QspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_qspec)
        try:
            self.state = 449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 443
                self.tensorall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 444
                    self.arithExpr(0)


                self.state = 447
                self.manyketpart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 448
                self.sumspec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def partpred(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.PartpredContext)
            else:
                return self.getTypedRuleContext(ExpParser.PartpredContext,i)


        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def boolLiteral(self):
            return self.getTypedRuleContext(ExpParser.BoolLiteralContext,0)


        def partsections(self):
            return self.getTypedRuleContext(ExpParser.PartsectionsContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_partspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartspec" ):
                listener.enterPartspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartspec" ):
                listener.exitPartspec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartspec" ):
                return visitor.visitPartspec(self)
            else:
                return visitor.visitChildren(self)




    def partspec(self):

        localctx = ExpParser.PartspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_partspec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(ExpParser.T__12)
            self.state = 452
            self.match(ExpParser.T__4)
            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 453
                self.arithExpr(0)
                self.state = 454
                self.match(ExpParser.T__13)
                self.state = 455
                self.arithExpr(0)
                self.state = 456
                self.match(ExpParser.T__13)
                self.state = 457
                self.arithExpr(0)
                self.state = 458
                self.match(ExpParser.T__13)
                self.state = 459
                self.arithExpr(0)
                pass

            elif la_ == 2:
                self.state = 464
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 461
                    self.arithExpr(0)
                    self.state = 462
                    self.match(ExpParser.T__13)


                self.state = 466
                self.partpred()
                self.state = 467
                self.match(ExpParser.T__13)
                self.state = 468
                self.partpred()
                pass

            elif la_ == 3:
                self.state = 470
                self.match(ExpParser.ID)
                self.state = 471
                self.match(ExpParser.T__13)
                self.state = 472
                self.boolLiteral()
                self.state = 473
                self.match(ExpParser.T__13)
                self.state = 474
                self.arithExpr(0)
                pass

            elif la_ == 4:
                self.state = 476
                self.arithExpr(0)
                self.state = 477
                self.match(ExpParser.T__13)
                self.state = 478
                self.arithExpr(0)
                pass

            elif la_ == 5:
                self.state = 480
                self.partsections()
                pass


            self.state = 483
            self.match(ExpParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartpredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.amplitude = None # ArithExprContext
            self.pred = None # BexpContext

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def bexp(self):
            return self.getTypedRuleContext(ExpParser.BexpContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_partpred

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartpred" ):
                listener.enterPartpred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartpred" ):
                listener.exitPartpred(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartpred" ):
                return visitor.visitPartpred(self)
            else:
                return visitor.visitChildren(self)




    def partpred(self):

        localctx = ExpParser.PartpredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_partpred)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            localctx.amplitude = self.arithExpr(0)
            self.state = 486
            self.match(ExpParser.T__2)
            self.state = 487
            localctx.pred = self.bexp()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartsectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.amplitude = None # ArithExprContext
            self.pred = None # FcallContext

        def ket(self):
            return self.getTypedRuleContext(ExpParser.KetContext,0)


        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def fcall(self):
            return self.getTypedRuleContext(ExpParser.FcallContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_partsection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartsection" ):
                listener.enterPartsection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartsection" ):
                listener.exitPartsection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartsection" ):
                return visitor.visitPartsection(self)
            else:
                return visitor.visitChildren(self)




    def partsection(self):

        localctx = ExpParser.PartsectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_partsection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            localctx.amplitude = self.arithExpr(0)
            self.state = 490
            self.match(ExpParser.T__2)
            self.state = 491
            self.ket()
            self.state = 492
            localctx.pred = self.fcall()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartsectionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partsection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.PartsectionContext)
            else:
                return self.getTypedRuleContext(ExpParser.PartsectionContext,i)


        def TAdd(self):
            return self.getToken(ExpParser.TAdd, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_partsections

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartsections" ):
                listener.enterPartsections(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartsections" ):
                listener.exitPartsections(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartsections" ):
                return visitor.visitPartsections(self)
            else:
                return visitor.visitChildren(self)




    def partsections(self):

        localctx = ExpParser.PartsectionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_partsections)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.partsection()

            self.state = 495
            self.match(ExpParser.TAdd)
            self.state = 496
            self.partsection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TensorallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def TDot(self):
            return self.getToken(ExpParser.TDot, 0)

        def manyket(self):
            return self.getTypedRuleContext(ExpParser.ManyketContext,0)


        def TIn(self):
            return self.getToken(ExpParser.TIn, 0)

        def crange(self):
            return self.getTypedRuleContext(ExpParser.CrangeContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_tensorall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTensorall" ):
                listener.enterTensorall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTensorall" ):
                listener.exitTensorall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTensorall" ):
                return visitor.visitTensorall(self)
            else:
                return visitor.visitChildren(self)




    def tensorall(self):

        localctx = ExpParser.TensorallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_tensorall)
        try:
            self.state = 509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 498
                self.match(ExpParser.T__11)
                self.state = 499
                self.match(ExpParser.ID)
                self.state = 500
                self.match(ExpParser.TDot)
                self.state = 501
                self.manyket()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 502
                self.match(ExpParser.T__11)
                self.state = 503
                self.match(ExpParser.ID)
                self.state = 504
                self.match(ExpParser.TIn)
                self.state = 505
                self.crange()
                self.state = 506
                self.match(ExpParser.TDot)
                self.state = 507
                self.manyket()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SumspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maySum(self):
            return self.getTypedRuleContext(ExpParser.MaySumContext,0)


        def manyketpart(self):
            return self.getTypedRuleContext(ExpParser.ManyketpartContext,0)


        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def And(self):
            return self.getToken(ExpParser.And, 0)

        def bexp(self):
            return self.getTypedRuleContext(ExpParser.BexpContext,0)


        def sumspec(self):
            return self.getTypedRuleContext(ExpParser.SumspecContext,0)


        def TDot(self):
            return self.getToken(ExpParser.TDot, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_sumspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSumspec" ):
                listener.enterSumspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSumspec" ):
                listener.exitSumspec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSumspec" ):
                return visitor.visitSumspec(self)
            else:
                return visitor.visitChildren(self)




    def sumspec(self):

        localctx = ExpParser.SumspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sumspec)
        self._la = 0 # Token type
        try:
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 511
                self.maySum()
                self.state = 531
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 513
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                    if la_ == 1:
                        self.state = 512
                        self.arithExpr(0)


                    self.state = 515
                    self.manyketpart()
                    self.state = 518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ExpParser.And:
                        self.state = 516
                        self.match(ExpParser.And)
                        self.state = 517
                        self.bexp()


                    pass

                elif la_ == 2:
                    self.state = 520
                    self.match(ExpParser.T__4)
                    self.state = 522
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                    if la_ == 1:
                        self.state = 521
                        self.arithExpr(0)


                    self.state = 524
                    self.manyketpart()
                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ExpParser.And:
                        self.state = 525
                        self.match(ExpParser.And)
                        self.state = 526
                        self.bexp()


                    self.state = 529
                    self.match(ExpParser.T__5)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.maySum()
                self.state = 537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 534
                    self.arithExpr(0)
                    self.state = 535
                    self.match(ExpParser.TDot)


                self.state = 539
                self.sumspec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 541
                self.match(ExpParser.T__4)
                self.state = 542
                self.sumspec()
                self.state = 543
                self.match(ExpParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaySumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TSum(self):
            return self.getToken(ExpParser.TSum, 0)

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def TIn(self):
            return self.getToken(ExpParser.TIn, 0)

        def crange(self):
            return self.getTypedRuleContext(ExpParser.CrangeContext,0)


        def TDot(self):
            return self.getToken(ExpParser.TDot, 0)

        def bexp(self):
            return self.getTypedRuleContext(ExpParser.BexpContext,0)


        def AT(self):
            return self.getToken(ExpParser.AT, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_maySum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaySum" ):
                listener.enterMaySum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaySum" ):
                listener.exitMaySum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaySum" ):
                return visitor.visitMaySum(self)
            else:
                return visitor.visitChildren(self)




    def maySum(self):

        localctx = ExpParser.MaySumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_maySum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(ExpParser.TSum)
            self.state = 548
            self.match(ExpParser.ID)
            self.state = 549
            self.match(ExpParser.TIn)
            self.state = 550
            self.crange()
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__14 or _la==ExpParser.AT:
                self.state = 551
                _la = self._input.LA(1)
                if not(_la==ExpParser.T__14 or _la==ExpParser.AT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 552
                self.match(ExpParser.T__4)
                self.state = 553
                self.bexp()
                self.state = 554
                self.match(ExpParser.T__5)


            self.state = 558
            self.match(ExpParser.TDot)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spec(self):
            return self.getTypedRuleContext(ExpParser.SpecContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_asserting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsserting" ):
                listener.enterAsserting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsserting" ):
                listener.exitAsserting(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsserting" ):
                return visitor.visitAsserting(self)
            else:
                return visitor.visitChildren(self)




    def asserting(self):

        localctx = ExpParser.AssertingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_asserting)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(ExpParser.T__15)
            self.state = 561
            self.spec()
            self.state = 562
            self.match(ExpParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qty(self):
            return self.getTypedRuleContext(ExpParser.QtyContext,0)


        def locus(self):
            return self.getTypedRuleContext(ExpParser.LocusContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_casting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCasting" ):
                listener.enterCasting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCasting" ):
                listener.exitCasting(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCasting" ):
                return visitor.visitCasting(self)
            else:
                return visitor.visitChildren(self)




    def casting(self):

        localctx = ExpParser.CastingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_casting)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(ExpParser.T__4)
            self.state = 565
            self.qty()
            self.state = 566
            self.match(ExpParser.T__5)
            self.state = 567
            self.locus()
            self.state = 568
            self.match(ExpParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarcreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindings(self):
            return self.getTypedRuleContext(ExpParser.BindingsContext,0)


        def typeOptionalBindings(self):
            return self.getTypedRuleContext(ExpParser.TypeOptionalBindingsContext,0)


        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_varcreate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarcreate" ):
                listener.enterVarcreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarcreate" ):
                listener.exitVarcreate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarcreate" ):
                return visitor.visitVarcreate(self)
            else:
                return visitor.visitChildren(self)




    def varcreate(self):

        localctx = ExpParser.VarcreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_varcreate)
        try:
            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 570
                self.match(ExpParser.T__16)
                self.state = 571
                self.bindings()
                self.state = 572
                self.match(ExpParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.match(ExpParser.T__16)
                self.state = 575
                self.typeOptionalBindings()
                self.state = 576
                self.match(ExpParser.T__17)
                self.state = 577
                self.arithExpr(0)
                self.state = 578
                self.match(ExpParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssigningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idindices(self):
            return self.getTypedRuleContext(ExpParser.IdindicesContext,0)


        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_assigning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssigning" ):
                listener.enterAssigning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssigning" ):
                listener.exitAssigning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssigning" ):
                return visitor.visitAssigning(self)
            else:
                return visitor.visitChildren(self)




    def assigning(self):

        localctx = ExpParser.AssigningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assigning)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.idindices()
            self.state = 583
            self.match(ExpParser.T__17)
            self.state = 584
            self.arithExpr(0)
            self.state = 585
            self.match(ExpParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(ExpParser.ID)
            else:
                return self.getToken(ExpParser.ID, i)

        def getRuleIndex(self):
            return ExpParser.RULE_ids

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIds" ):
                listener.enterIds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIds" ):
                listener.exitIds(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIds" ):
                return visitor.visitIds(self)
            else:
                return visitor.visitChildren(self)




    def ids(self):

        localctx = ExpParser.IdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_ids)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(ExpParser.ID)
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ExpParser.T__13:
                self.state = 588
                self.match(ExpParser.T__13)
                self.state = 589
                self.match(ExpParser.ID)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdindicesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(ExpParser.ID)
            else:
                return self.getToken(ExpParser.ID, i)

        def idindex(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.IdindexContext)
            else:
                return self.getTypedRuleContext(ExpParser.IdindexContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_idindices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdindices" ):
                listener.enterIdindices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdindices" ):
                listener.exitIdindices(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdindices" ):
                return visitor.visitIdindices(self)
            else:
                return visitor.visitChildren(self)




    def idindices(self):

        localctx = ExpParser.IdindicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_idindices)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 595
                self.match(ExpParser.ID)
                pass

            elif la_ == 2:
                self.state = 596
                self.idindex()
                pass


            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ExpParser.T__13:
                self.state = 599
                self.match(ExpParser.T__13)
                self.state = 602
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 600
                    self.match(ExpParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 601
                    self.idindex()
                    pass


                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ExpParser.ExprContext,0)


        def locus(self):
            return self.getTypedRuleContext(ExpParser.LocusContext,0)


        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_qassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQassign" ):
                listener.enterQassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQassign" ):
                listener.exitQassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQassign" ):
                return visitor.visitQassign(self)
            else:
                return visitor.visitChildren(self)




    def qassign(self):

        localctx = ExpParser.QassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_qassign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 609
                self.locus()
                pass

            elif la_ == 2:
                self.state = 610
                self.match(ExpParser.ID)
                pass


            self.state = 613
            self.match(ExpParser.T__18)
            self.state = 614
            self.expr()
            self.state = 615
            self.match(ExpParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QcreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def locus(self):
            return self.getTypedRuleContext(ExpParser.LocusContext,0)


        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_qcreate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQcreate" ):
                listener.enterQcreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQcreate" ):
                listener.exitQcreate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQcreate" ):
                return visitor.visitQcreate(self)
            else:
                return visitor.visitChildren(self)




    def qcreate(self):

        localctx = ExpParser.QcreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_qcreate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(ExpParser.T__16)
            self.state = 620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 618
                self.locus()
                pass

            elif la_ == 2:
                self.state = 619
                self.match(ExpParser.ID)
                pass


            self.state = 622
            self.match(ExpParser.T__18)
            self.state = 623
            self.arithExpr(0)
            self.state = 624
            self.match(ExpParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idindices(self):
            return self.getTypedRuleContext(ExpParser.IdindicesContext,0)


        def locus(self):
            return self.getTypedRuleContext(ExpParser.LocusContext,0)


        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_measure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasure" ):
                listener.enterMeasure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasure" ):
                listener.exitMeasure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasure" ):
                return visitor.visitMeasure(self)
            else:
                return visitor.visitChildren(self)




    def measure(self):

        localctx = ExpParser.MeasureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_measure)
        try:
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.idindices()
                self.state = 627
                self.match(ExpParser.T__18)
                self.state = 628
                self.match(ExpParser.T__19)
                self.state = 629
                self.match(ExpParser.T__4)
                self.state = 632
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 630
                    self.locus()
                    pass

                elif la_ == 2:
                    self.state = 631
                    self.match(ExpParser.ID)
                    pass


                self.state = 634
                self.match(ExpParser.T__5)
                self.state = 635
                self.match(ExpParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 637
                self.idindices()
                self.state = 638
                self.match(ExpParser.T__18)
                self.state = 639
                self.match(ExpParser.T__19)
                self.state = 640
                self.match(ExpParser.T__4)
                self.state = 643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 641
                    self.locus()
                    pass

                elif la_ == 2:
                    self.state = 642
                    self.match(ExpParser.ID)
                    pass


                self.state = 645
                self.match(ExpParser.T__13)
                self.state = 646
                self.arithExpr(0)
                self.state = 647
                self.match(ExpParser.T__5)
                self.state = 648
                self.match(ExpParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureAbortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idindices(self):
            return self.getTypedRuleContext(ExpParser.IdindicesContext,0)


        def locus(self):
            return self.getTypedRuleContext(ExpParser.LocusContext,0)


        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_measureAbort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureAbort" ):
                listener.enterMeasureAbort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureAbort" ):
                listener.exitMeasureAbort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureAbort" ):
                return visitor.visitMeasureAbort(self)
            else:
                return visitor.visitChildren(self)




    def measureAbort(self):

        localctx = ExpParser.MeasureAbortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_measureAbort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.idindices()
            self.state = 653
            self.match(ExpParser.T__18)
            self.state = 654
            self.match(ExpParser.T__20)
            self.state = 655
            self.match(ExpParser.T__4)
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 656
                self.locus()
                pass

            elif la_ == 2:
                self.state = 657
                self.match(ExpParser.ID)
                pass


            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__13:
                self.state = 660
                self.match(ExpParser.T__13)
                self.state = 661
                self.arithExpr(0)


            self.state = 664
            self.match(ExpParser.T__5)
            self.state = 665
            self.match(ExpParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Return(self):
            return self.getToken(ExpParser.Return, 0)

        def ids(self):
            return self.getTypedRuleContext(ExpParser.IdsContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = ExpParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(ExpParser.Return)
            self.state = 668
            self.ids()
            self.state = 669
            self.match(ExpParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ExpParser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStmt" ):
                return visitor.visitBreakStmt(self)
            else:
                return visitor.visitChildren(self)




    def breakStmt(self):

        localctx = ExpParser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(ExpParser.T__21)
            self.state = 672
            self.match(ExpParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfexpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ExpParser.If, 0)

        def stmts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.StmtsContext)
            else:
                return self.getTypedRuleContext(ExpParser.StmtsContext,i)


        def bexp(self):
            return self.getTypedRuleContext(ExpParser.BexpContext,0)


        def Else(self):
            return self.getToken(ExpParser.Else, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_ifexp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfexp" ):
                listener.enterIfexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfexp" ):
                listener.exitIfexp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfexp" ):
                return visitor.visitIfexp(self)
            else:
                return visitor.visitChildren(self)




    def ifexp(self):

        localctx = ExpParser.IfexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_ifexp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(ExpParser.If)
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 675
                self.match(ExpParser.T__4)
                self.state = 676
                self.bexp()
                self.state = 677
                self.match(ExpParser.T__5)
                pass

            elif la_ == 2:
                self.state = 679
                self.bexp()
                pass


            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__22:
                self.state = 682
                self.match(ExpParser.T__22)


            self.state = 685
            self.match(ExpParser.T__1)
            self.state = 686
            self.stmts()
            self.state = 687
            self.match(ExpParser.T__3)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.Else:
                self.state = 688
                self.match(ExpParser.Else)
                self.state = 689
                self.match(ExpParser.T__1)
                self.state = 690
                self.stmts()
                self.state = 691
                self.match(ExpParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CifexpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ExpParser.If, 0)

        def bexp(self):
            return self.getTypedRuleContext(ExpParser.BexpContext,0)


        def Else(self):
            return self.getToken(ExpParser.Else, 0)

        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_cifexp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCifexp" ):
                listener.enterCifexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCifexp" ):
                listener.exitCifexp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCifexp" ):
                return visitor.visitCifexp(self)
            else:
                return visitor.visitChildren(self)




    def cifexp(self):

        localctx = ExpParser.CifexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_cifexp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(ExpParser.If)
            self.state = 696
            self.bexp()
            self.state = 697
            self.match(ExpParser.T__22)
            self.state = 703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ExpParser.T__4, ExpParser.T__7, ExpParser.T__25, ExpParser.T__26, ExpParser.T__27, ExpParser.T__28, ExpParser.T__29, ExpParser.T__30, ExpParser.T__31, ExpParser.T__32, ExpParser.T__33, ExpParser.TSub, ExpParser.If, ExpParser.TrueLiteral, ExpParser.FalseLiteral, ExpParser.Number, ExpParser.ID]:
                self.state = 698
                self.arithExpr(0)
                pass
            elif token in [ExpParser.T__1]:
                self.state = 699
                self.match(ExpParser.T__1)
                self.state = 700
                self.arithExpr(0)
                self.state = 701
                self.match(ExpParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 705
            self.match(ExpParser.Else)
            self.state = 711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ExpParser.T__4, ExpParser.T__7, ExpParser.T__25, ExpParser.T__26, ExpParser.T__27, ExpParser.T__28, ExpParser.T__29, ExpParser.T__30, ExpParser.T__31, ExpParser.T__32, ExpParser.T__33, ExpParser.TSub, ExpParser.If, ExpParser.TrueLiteral, ExpParser.FalseLiteral, ExpParser.Number, ExpParser.ID]:
                self.state = 706
                self.arithExpr(0)
                pass
            elif token in [ExpParser.T__1]:
                self.state = 707
                self.match(ExpParser.T__1)
                self.state = 708
                self.arithExpr(0)
                self.state = 709
                self.match(ExpParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KetArithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ketCifexp(self):
            return self.getTypedRuleContext(ExpParser.KetCifexpContext,0)


        def partspec(self):
            return self.getTypedRuleContext(ExpParser.PartspecContext,0)


        def ketArithExpr(self):
            return self.getTypedRuleContext(ExpParser.KetArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_ketArithExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKetArithExpr" ):
                listener.enterKetArithExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKetArithExpr" ):
                listener.exitKetArithExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKetArithExpr" ):
                return visitor.visitKetArithExpr(self)
            else:
                return visitor.visitChildren(self)




    def ketArithExpr(self):

        localctx = ExpParser.KetArithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_ketArithExpr)
        try:
            self.state = 719
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ExpParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.ketCifexp()
                pass
            elif token in [ExpParser.T__12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.partspec()
                pass
            elif token in [ExpParser.T__4]:
                self.enterOuterAlt(localctx, 3)
                self.state = 715
                self.match(ExpParser.T__4)
                self.state = 716
                self.ketArithExpr()
                self.state = 717
                self.match(ExpParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KetCifexpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ExpParser.If, 0)

        def bexp(self):
            return self.getTypedRuleContext(ExpParser.BexpContext,0)


        def ketArithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.KetArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.KetArithExprContext,i)


        def Else(self):
            return self.getToken(ExpParser.Else, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_ketCifexp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKetCifexp" ):
                listener.enterKetCifexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKetCifexp" ):
                listener.exitKetCifexp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKetCifexp" ):
                return visitor.visitKetCifexp(self)
            else:
                return visitor.visitChildren(self)




    def ketCifexp(self):

        localctx = ExpParser.KetCifexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_ketCifexp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(ExpParser.If)
            self.state = 722
            self.bexp()
            self.state = 723
            self.match(ExpParser.T__22)
            self.state = 724
            self.ketArithExpr()
            self.state = 725
            self.match(ExpParser.Else)
            self.state = 726
            self.ketArithExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ManyketpartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ket(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.KetContext)
            else:
                return self.getTypedRuleContext(ExpParser.KetContext,i)


        def ketArithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.KetArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.KetArithExprContext,i)


        def fcall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.FcallContext)
            else:
                return self.getTypedRuleContext(ExpParser.FcallContext,i)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(ExpParser.ID)
            else:
                return self.getToken(ExpParser.ID, i)

        def idindex(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.IdindexContext)
            else:
                return self.getTypedRuleContext(ExpParser.IdindexContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_manyketpart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManyketpart" ):
                listener.enterManyketpart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManyketpart" ):
                listener.exitManyketpart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManyketpart" ):
                return visitor.visitManyketpart(self)
            else:
                return visitor.visitChildren(self)




    def manyketpart(self):

        localctx = ExpParser.ManyketpartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_manyketpart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 744
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        self.state = 728
                        self.ket()
                        pass

                    elif la_ == 2:
                        self.state = 729
                        self.ketArithExpr()
                        pass

                    elif la_ == 3:
                        self.state = 730
                        self.match(ExpParser.T__4)
                        self.state = 731
                        self.ket()
                        self.state = 736
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ExpParser.T__13:
                            self.state = 732
                            self.match(ExpParser.T__13)
                            self.state = 733
                            self.ket()
                            self.state = 738
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 739
                        self.match(ExpParser.T__5)
                        pass

                    elif la_ == 4:
                        self.state = 741
                        self.fcall()
                        pass

                    elif la_ == 5:
                        self.state = 742
                        self.match(ExpParser.ID)
                        pass

                    elif la_ == 6:
                        self.state = 743
                        self.idindex()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 746 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForexpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(ExpParser.For, 0)

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def TIn(self):
            return self.getToken(ExpParser.TIn, 0)

        def crange(self):
            return self.getTypedRuleContext(ExpParser.CrangeContext,0)


        def loopConds(self):
            return self.getTypedRuleContext(ExpParser.LoopCondsContext,0)


        def stmts(self):
            return self.getTypedRuleContext(ExpParser.StmtsContext,0)


        def bexp(self):
            return self.getTypedRuleContext(ExpParser.BexpContext,0)


        def And(self):
            return self.getToken(ExpParser.And, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_forexp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForexp" ):
                listener.enterForexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForexp" ):
                listener.exitForexp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForexp" ):
                return visitor.visitForexp(self)
            else:
                return visitor.visitChildren(self)




    def forexp(self):

        localctx = ExpParser.ForexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_forexp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(ExpParser.For)
            self.state = 749
            self.match(ExpParser.ID)
            self.state = 750
            self.match(ExpParser.TIn)
            self.state = 751
            self.crange()
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__23 or _la==ExpParser.And:
                self.state = 752
                _la = self._input.LA(1)
                if not(_la==ExpParser.T__23 or _la==ExpParser.And):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 753
                self.bexp()


            self.state = 756
            self.loopConds()
            self.state = 757
            self.match(ExpParser.T__1)
            self.state = 758
            self.stmts()
            self.state = 759
            self.match(ExpParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileexpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(ExpParser.While, 0)

        def loopConds(self):
            return self.getTypedRuleContext(ExpParser.LoopCondsContext,0)


        def stmts(self):
            return self.getTypedRuleContext(ExpParser.StmtsContext,0)


        def bexp(self):
            return self.getTypedRuleContext(ExpParser.BexpContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_whileexp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileexp" ):
                listener.enterWhileexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileexp" ):
                listener.exitWhileexp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileexp" ):
                return visitor.visitWhileexp(self)
            else:
                return visitor.visitChildren(self)




    def whileexp(self):

        localctx = ExpParser.WhileexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_whileexp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(ExpParser.While)
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 762
                self.match(ExpParser.T__4)
                self.state = 763
                self.bexp()
                self.state = 764
                self.match(ExpParser.T__5)
                pass

            elif la_ == 2:
                self.state = 766
                self.bexp()
                pass


            self.state = 769
            self.loopConds()
            self.state = 770
            self.match(ExpParser.T__1)
            self.state = 771
            self.stmts()
            self.state = 772
            self.match(ExpParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FcallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def arithExprsOrKets(self):
            return self.getTypedRuleContext(ExpParser.ArithExprsOrKetsContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_fcall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFcall" ):
                listener.enterFcall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFcall" ):
                listener.exitFcall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFcall" ):
                return visitor.visitFcall(self)
            else:
                return visitor.visitChildren(self)




    def fcall(self):

        localctx = ExpParser.FcallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_fcall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(ExpParser.ID)
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__24:
                self.state = 775
                self.match(ExpParser.T__24)


            self.state = 778
            self.match(ExpParser.T__4)
            self.state = 779
            self.arithExprsOrKets()
            self.state = 780
            self.match(ExpParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithExprsOrKetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def ket(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.KetContext)
            else:
                return self.getTypedRuleContext(ExpParser.KetContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_arithExprsOrKets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithExprsOrKets" ):
                listener.enterArithExprsOrKets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithExprsOrKets" ):
                listener.exitArithExprsOrKets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithExprsOrKets" ):
                return visitor.visitArithExprsOrKets(self)
            else:
                return visitor.visitChildren(self)




    def arithExprsOrKets(self):

        localctx = ExpParser.ArithExprsOrKetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_arithExprsOrKets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 782
                self.arithExpr(0)
                pass

            elif la_ == 2:
                self.state = 783
                self.ket()
                pass


            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ExpParser.T__13:
                self.state = 786
                self.match(ExpParser.T__13)
                self.state = 789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 787
                    self.arithExpr(0)
                    pass

                elif la_ == 2:
                    self.state = 788
                    self.ket()
                    pass


                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithExprWithSumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maySum(self):
            return self.getTypedRuleContext(ExpParser.MaySumContext,0)


        def arithExprWithSum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprWithSumContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprWithSumContext,i)


        def arithAtomic(self):
            return self.getTypedRuleContext(ExpParser.ArithAtomicContext,0)


        def exponentialOp(self):
            return self.getTypedRuleContext(ExpParser.ExponentialOpContext,0)


        def multiplicativeOp(self):
            return self.getTypedRuleContext(ExpParser.MultiplicativeOpContext,0)


        def additiveOp(self):
            return self.getTypedRuleContext(ExpParser.AdditiveOpContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_arithExprWithSum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithExprWithSum" ):
                listener.enterArithExprWithSum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithExprWithSum" ):
                listener.exitArithExprWithSum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithExprWithSum" ):
                return visitor.visitArithExprWithSum(self)
            else:
                return visitor.visitChildren(self)



    def arithExprWithSum(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ExpParser.ArithExprWithSumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_arithExprWithSum, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 797
                self.maySum()
                self.state = 798
                self.arithExprWithSum(3)
                pass

            elif la_ == 2:
                self.state = 800
                self.match(ExpParser.T__4)
                self.state = 801
                self.arithExprWithSum(0)
                self.state = 802
                self.match(ExpParser.T__5)
                pass

            elif la_ == 3:
                self.state = 804
                self.arithAtomic()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 821
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 819
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                    if la_ == 1:
                        localctx = ExpParser.ArithExprWithSumContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arithExprWithSum)
                        self.state = 807
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 808
                        self.exponentialOp()
                        self.state = 809
                        self.arithExprWithSum(7)
                        pass

                    elif la_ == 2:
                        localctx = ExpParser.ArithExprWithSumContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arithExprWithSum)
                        self.state = 811
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 812
                        self.multiplicativeOp()
                        self.state = 813
                        self.arithExprWithSum(6)
                        pass

                    elif la_ == 3:
                        localctx = ExpParser.ArithExprWithSumContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arithExprWithSum)
                        self.state = 815
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 816
                        self.additiveOp()
                        self.state = 817
                        self.arithExprWithSum(5)
                        pass

             
                self.state = 823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ArithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cifexp(self):
            return self.getTypedRuleContext(ExpParser.CifexpContext,0)


        def arithAtomic(self):
            return self.getTypedRuleContext(ExpParser.ArithAtomicContext,0)


        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def exponentialOp(self):
            return self.getTypedRuleContext(ExpParser.ExponentialOpContext,0)


        def multiplicativeOp(self):
            return self.getTypedRuleContext(ExpParser.MultiplicativeOpContext,0)


        def additiveOp(self):
            return self.getTypedRuleContext(ExpParser.AdditiveOpContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_arithExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithExpr" ):
                listener.enterArithExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithExpr" ):
                listener.exitArithExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithExpr" ):
                return visitor.visitArithExpr(self)
            else:
                return visitor.visitChildren(self)



    def arithExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ExpParser.ArithExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_arithExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ExpParser.If]:
                self.state = 825
                self.cifexp()
                pass
            elif token in [ExpParser.T__4, ExpParser.T__7, ExpParser.T__25, ExpParser.T__26, ExpParser.T__27, ExpParser.T__28, ExpParser.T__29, ExpParser.T__30, ExpParser.T__31, ExpParser.T__32, ExpParser.T__33, ExpParser.TSub, ExpParser.TrueLiteral, ExpParser.FalseLiteral, ExpParser.Number, ExpParser.ID]:
                self.state = 826
                self.arithAtomic()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 843
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 841
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                    if la_ == 1:
                        localctx = ExpParser.ArithExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arithExpr)
                        self.state = 829
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 830
                        self.exponentialOp()
                        self.state = 831
                        self.arithExpr(5)
                        pass

                    elif la_ == 2:
                        localctx = ExpParser.ArithExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arithExpr)
                        self.state = 833
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 834
                        self.multiplicativeOp()
                        self.state = 835
                        self.arithExpr(4)
                        pass

                    elif la_ == 3:
                        localctx = ExpParser.ArithExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arithExpr)
                        self.state = 837
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 838
                        self.additiveOp()
                        self.state = 839
                        self.arithExpr(3)
                        pass

             
                self.state = 845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ArithAtomicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numexp(self):
            return self.getTypedRuleContext(ExpParser.NumexpContext,0)


        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def TSub(self):
            return self.getToken(ExpParser.TSub, 0)

        def arithAtomic(self):
            return self.getTypedRuleContext(ExpParser.ArithAtomicContext,0)


        def boolLiteral(self):
            return self.getTypedRuleContext(ExpParser.BoolLiteralContext,0)


        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def fcall(self):
            return self.getTypedRuleContext(ExpParser.FcallContext,0)


        def absExpr(self):
            return self.getTypedRuleContext(ExpParser.AbsExprContext,0)


        def sinExpr(self):
            return self.getTypedRuleContext(ExpParser.SinExprContext,0)


        def cosExpr(self):
            return self.getTypedRuleContext(ExpParser.CosExprContext,0)


        def sqrtExpr(self):
            return self.getTypedRuleContext(ExpParser.SqrtExprContext,0)


        def omegaExpr(self):
            return self.getTypedRuleContext(ExpParser.OmegaExprContext,0)


        def rotExpr(self):
            return self.getTypedRuleContext(ExpParser.RotExprContext,0)


        def notExpr(self):
            return self.getTypedRuleContext(ExpParser.NotExprContext,0)


        def setInstance(self):
            return self.getTypedRuleContext(ExpParser.SetInstanceContext,0)


        def qrange(self):
            return self.getTypedRuleContext(ExpParser.QrangeContext,0)


        def ketCallExpr(self):
            return self.getTypedRuleContext(ExpParser.KetCallExprContext,0)


        def memberAccess(self):
            return self.getTypedRuleContext(ExpParser.MemberAccessContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_arithAtomic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithAtomic" ):
                listener.enterArithAtomic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithAtomic" ):
                listener.exitArithAtomic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithAtomic" ):
                return visitor.visitArithAtomic(self)
            else:
                return visitor.visitChildren(self)




    def arithAtomic(self):

        localctx = ExpParser.ArithAtomicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_arithAtomic)
        try:
            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 846
                self.numexp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 847
                self.match(ExpParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 848
                self.match(ExpParser.TSub)
                self.state = 849
                self.arithAtomic()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 850
                self.boolLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 851
                self.match(ExpParser.T__4)
                self.state = 852
                self.arithExpr(0)
                self.state = 853
                self.match(ExpParser.T__5)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 855
                self.fcall()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 856
                self.absExpr()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 857
                self.sinExpr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 858
                self.cosExpr()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 859
                self.sqrtExpr()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 860
                self.omegaExpr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 861
                self.rotExpr()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 862
                self.notExpr()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 863
                self.setInstance()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 864
                self.qrange()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 865
                self.ketCallExpr()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 866
                self.memberAccess()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def TExp(self):
            return self.getToken(ExpParser.TExp, 0)

        def numexp(self):
            return self.getTypedRuleContext(ExpParser.NumexpContext,0)


        def arithAtomic(self):
            return self.getTypedRuleContext(ExpParser.ArithAtomicContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_sinExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSinExpr" ):
                listener.enterSinExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSinExpr" ):
                listener.exitSinExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSinExpr" ):
                return visitor.visitSinExpr(self)
            else:
                return visitor.visitChildren(self)




    def sinExpr(self):

        localctx = ExpParser.SinExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_sinExpr)
        self._la = 0 # Token type
        try:
            self.state = 880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                self.match(ExpParser.T__25)
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ExpParser.TExp:
                    self.state = 870
                    self.match(ExpParser.TExp)
                    self.state = 871
                    self.numexp()


                self.state = 874
                self.match(ExpParser.T__4)
                self.state = 875
                self.arithExpr(0)
                self.state = 876
                self.match(ExpParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 878
                self.match(ExpParser.T__25)
                self.state = 879
                self.arithAtomic()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CosExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def TExp(self):
            return self.getToken(ExpParser.TExp, 0)

        def numexp(self):
            return self.getTypedRuleContext(ExpParser.NumexpContext,0)


        def arithAtomic(self):
            return self.getTypedRuleContext(ExpParser.ArithAtomicContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_cosExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCosExpr" ):
                listener.enterCosExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCosExpr" ):
                listener.exitCosExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCosExpr" ):
                return visitor.visitCosExpr(self)
            else:
                return visitor.visitChildren(self)




    def cosExpr(self):

        localctx = ExpParser.CosExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_cosExpr)
        self._la = 0 # Token type
        try:
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 882
                self.match(ExpParser.T__26)
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ExpParser.TExp:
                    self.state = 883
                    self.match(ExpParser.TExp)
                    self.state = 884
                    self.numexp()


                self.state = 887
                self.match(ExpParser.T__4)
                self.state = 888
                self.arithExpr(0)
                self.state = 889
                self.match(ExpParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 891
                self.match(ExpParser.T__26)
                self.state = 892
                self.arithAtomic()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqrtExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def TExp(self):
            return self.getToken(ExpParser.TExp, 0)

        def numexp(self):
            return self.getTypedRuleContext(ExpParser.NumexpContext,0)


        def arithAtomic(self):
            return self.getTypedRuleContext(ExpParser.ArithAtomicContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_sqrtExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqrtExpr" ):
                listener.enterSqrtExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqrtExpr" ):
                listener.exitSqrtExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqrtExpr" ):
                return visitor.visitSqrtExpr(self)
            else:
                return visitor.visitChildren(self)




    def sqrtExpr(self):

        localctx = ExpParser.SqrtExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_sqrtExpr)
        self._la = 0 # Token type
        try:
            self.state = 906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.match(ExpParser.T__27)
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ExpParser.TExp:
                    self.state = 896
                    self.match(ExpParser.TExp)
                    self.state = 897
                    self.numexp()


                self.state = 900
                self.match(ExpParser.T__4)
                self.state = 901
                self.arithExpr(0)
                self.state = 902
                self.match(ExpParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 904
                self.match(ExpParser.T__27)
                self.state = 905
                self.arithAtomic()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_notExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpr" ):
                listener.enterNotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpr" ):
                listener.exitNotExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpr" ):
                return visitor.visitNotExpr(self)
            else:
                return visitor.visitChildren(self)




    def notExpr(self):

        localctx = ExpParser.NotExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_notExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.match(ExpParser.T__7)
            self.state = 909
            self.match(ExpParser.T__4)
            self.state = 910
            self.arithExpr(0)
            self.state = 911
            self.match(ExpParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbsExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_absExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbsExpr" ):
                listener.enterAbsExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbsExpr" ):
                listener.exitAbsExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbsExpr" ):
                return visitor.visitAbsExpr(self)
            else:
                return visitor.visitChildren(self)




    def absExpr(self):

        localctx = ExpParser.AbsExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_absExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(ExpParser.T__28)
            self.state = 914
            self.arithExpr(0)
            self.state = 915
            self.match(ExpParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OmegaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_omegaExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOmegaExpr" ):
                listener.enterOmegaExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOmegaExpr" ):
                listener.exitOmegaExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOmegaExpr" ):
                return visitor.visitOmegaExpr(self)
            else:
                return visitor.visitChildren(self)




    def omegaExpr(self):

        localctx = ExpParser.OmegaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_omegaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            _la = self._input.LA(1)
            if not(_la==ExpParser.T__29 or _la==ExpParser.T__30):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 918
            self.match(ExpParser.T__4)
            self.state = 919
            self.arithExpr(0)
            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 920
                self.match(ExpParser.T__13)
                self.state = 921
                self.arithExpr(0)


            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__13:
                self.state = 924
                self.match(ExpParser.T__13)
                self.state = 925
                self.arithExpr(0)


            self.state = 928
            self.match(ExpParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_rotExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRotExpr" ):
                listener.enterRotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRotExpr" ):
                listener.exitRotExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRotExpr" ):
                return visitor.visitRotExpr(self)
            else:
                return visitor.visitChildren(self)




    def rotExpr(self):

        localctx = ExpParser.RotExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rotExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(ExpParser.T__31)
            self.state = 931
            self.match(ExpParser.T__4)
            self.state = 932
            self.arithExpr(0)
            self.state = 933
            self.match(ExpParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KetCallExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_ketCallExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKetCallExpr" ):
                listener.enterKetCallExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKetCallExpr" ):
                listener.exitKetCallExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKetCallExpr" ):
                return visitor.visitKetCallExpr(self)
            else:
                return visitor.visitChildren(self)




    def ketCallExpr(self):

        localctx = ExpParser.KetCallExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_ketCallExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(ExpParser.T__32)
            self.state = 936
            self.match(ExpParser.T__4)
            self.state = 937
            self.arithExpr(0)
            self.state = 938
            self.match(ExpParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetInstanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_setInstance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetInstance" ):
                listener.enterSetInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetInstance" ):
                listener.exitSetInstance(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetInstance" ):
                return visitor.visitSetInstance(self)
            else:
                return visitor.visitChildren(self)




    def setInstance(self):

        localctx = ExpParser.SetInstanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_setInstance)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(ExpParser.T__33)
            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ExpParser.T__4) | (1 << ExpParser.T__7) | (1 << ExpParser.T__25) | (1 << ExpParser.T__26) | (1 << ExpParser.T__27) | (1 << ExpParser.T__28) | (1 << ExpParser.T__29) | (1 << ExpParser.T__30) | (1 << ExpParser.T__31) | (1 << ExpParser.T__32) | (1 << ExpParser.T__33) | (1 << ExpParser.TSub))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ExpParser.If - 73)) | (1 << (ExpParser.TrueLiteral - 73)) | (1 << (ExpParser.FalseLiteral - 73)) | (1 << (ExpParser.Number - 73)) | (1 << (ExpParser.ID - 73)))) != 0):
                self.state = 941
                self.arithExpr(0)
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ExpParser.T__13:
                    self.state = 942
                    self.match(ExpParser.T__13)
                    self.state = 943
                    self.arithExpr(0)
                    self.state = 948
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 951
            self.match(ExpParser.T__34)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(ExpParser.ID)
            else:
                return self.getToken(ExpParser.ID, i)

        def TDot(self, i:int=None):
            if i is None:
                return self.getTokens(ExpParser.TDot)
            else:
                return self.getToken(ExpParser.TDot, i)

        def getRuleIndex(self):
            return ExpParser.RULE_memberAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccess" ):
                return visitor.visitMemberAccess(self)
            else:
                return visitor.visitChildren(self)




    def memberAccess(self):

        localctx = ExpParser.MemberAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_memberAccess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(ExpParser.ID)
            self.state = 956 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 954
                    self.match(ExpParser.TDot)
                    self.state = 955
                    self.match(ExpParser.ID)

                else:
                    raise NoViableAltException(self)
                self.state = 958 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHad(self):
            return self.getToken(ExpParser.SHad, 0)

        def SQFT(self):
            return self.getToken(ExpParser.SQFT, 0)

        def RQFT(self):
            return self.getToken(ExpParser.RQFT, 0)

        def lambdaT(self):
            return self.getTypedRuleContext(ExpParser.LambdaTContext,0)


        def dis(self):
            return self.getTypedRuleContext(ExpParser.DisContext,0)


        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = ExpParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_expr)
        try:
            self.state = 966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ExpParser.SHad]:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.match(ExpParser.SHad)
                pass
            elif token in [ExpParser.SQFT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.match(ExpParser.SQFT)
                pass
            elif token in [ExpParser.RQFT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 962
                self.match(ExpParser.RQFT)
                pass
            elif token in [ExpParser.TCl]:
                self.enterOuterAlt(localctx, 4)
                self.state = 963
                self.lambdaT()
                pass
            elif token in [ExpParser.T__35]:
                self.enterOuterAlt(localctx, 5)
                self.state = 964
                self.dis()
                pass
            elif token in [ExpParser.ID]:
                self.enterOuterAlt(localctx, 6)
                self.state = 965
                self.match(ExpParser.ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaTContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TCl(self):
            return self.getToken(ExpParser.TCl, 0)

        def ARROW(self):
            return self.getToken(ExpParser.ARROW, 0)

        def omegaExpr(self):
            return self.getTypedRuleContext(ExpParser.OmegaExprContext,0)


        def manyket(self):
            return self.getTypedRuleContext(ExpParser.ManyketContext,0)


        def ids(self):
            return self.getTypedRuleContext(ExpParser.IdsContext,0)


        def bindings(self):
            return self.getTypedRuleContext(ExpParser.BindingsContext,0)


        def rotExpr(self):
            return self.getTypedRuleContext(ExpParser.RotExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_lambdaT

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaT" ):
                listener.enterLambdaT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaT" ):
                listener.exitLambdaT(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaT" ):
                return visitor.visitLambdaT(self)
            else:
                return visitor.visitChildren(self)




    def lambdaT(self):

        localctx = ExpParser.LambdaTContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_lambdaT)
        self._la = 0 # Token type
        try:
            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 968
                self.match(ExpParser.TCl)
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ExpParser.T__24:
                    self.state = 969
                    self.match(ExpParser.T__24)


                self.state = 972
                self.match(ExpParser.T__4)
                self.state = 978
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ExpParser.ID]:
                    self.state = 973
                    self.ids()
                    pass
                elif token in [ExpParser.T__4]:
                    self.state = 974
                    self.match(ExpParser.T__4)
                    self.state = 975
                    self.bindings()
                    self.state = 976
                    self.match(ExpParser.T__5)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 980
                self.match(ExpParser.ARROW)
                self.state = 981
                self.omegaExpr()
                self.state = 982
                self.manyket()
                self.state = 983
                self.match(ExpParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(ExpParser.TCl)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ExpParser.T__24:
                    self.state = 986
                    self.match(ExpParser.T__24)


                self.state = 989
                self.match(ExpParser.T__4)
                self.state = 995
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ExpParser.ID]:
                    self.state = 990
                    self.ids()
                    pass
                elif token in [ExpParser.T__4]:
                    self.state = 991
                    self.match(ExpParser.T__4)
                    self.state = 992
                    self.bindings()
                    self.state = 993
                    self.match(ExpParser.T__5)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 997
                self.match(ExpParser.ARROW)
                self.state = 998
                self.manyket()
                self.state = 999
                self.match(ExpParser.T__5)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1001
                self.match(ExpParser.TCl)
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ExpParser.T__24:
                    self.state = 1002
                    self.match(ExpParser.T__24)


                self.state = 1005
                self.match(ExpParser.T__4)
                self.state = 1011
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ExpParser.ID]:
                    self.state = 1006
                    self.ids()
                    pass
                elif token in [ExpParser.T__4]:
                    self.state = 1007
                    self.match(ExpParser.T__4)
                    self.state = 1008
                    self.bindings()
                    self.state = 1009
                    self.match(ExpParser.T__5)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1013
                self.match(ExpParser.ARROW)
                self.state = 1014
                self.omegaExpr()
                self.state = 1015
                self.match(ExpParser.T__5)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1017
                self.match(ExpParser.TCl)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ExpParser.T__24:
                    self.state = 1018
                    self.match(ExpParser.T__24)


                self.state = 1021
                self.match(ExpParser.T__4)
                self.state = 1027
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ExpParser.ID]:
                    self.state = 1022
                    self.ids()
                    pass
                elif token in [ExpParser.T__4]:
                    self.state = 1023
                    self.match(ExpParser.T__4)
                    self.state = 1024
                    self.bindings()
                    self.state = 1025
                    self.match(ExpParser.T__5)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1029
                self.match(ExpParser.ARROW)
                self.state = 1030
                self.rotExpr()
                self.state = 1031
                self.match(ExpParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ExpParser.ExprContext,0)


        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_dis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDis" ):
                listener.enterDis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDis" ):
                listener.exitDis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDis" ):
                return visitor.visitDis(self)
            else:
                return visitor.visitChildren(self)




    def dis(self):

        localctx = ExpParser.DisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.match(ExpParser.T__35)
            self.state = 1036
            self.match(ExpParser.T__4)
            self.state = 1037
            self.expr()
            self.state = 1038
            self.match(ExpParser.T__13)
            self.state = 1039
            self.arithExpr(0)
            self.state = 1040
            self.match(ExpParser.T__13)
            self.state = 1041
            self.arithExpr(0)
            self.state = 1042
            self.match(ExpParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ManyketContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ket(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.KetContext)
            else:
                return self.getTypedRuleContext(ExpParser.KetContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_manyket

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManyket" ):
                listener.enterManyket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManyket" ):
                listener.exitManyket(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManyket" ):
                return visitor.visitManyket(self)
            else:
                return visitor.visitChildren(self)




    def manyket(self):

        localctx = ExpParser.ManyketContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_manyket)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1044
                    self.ket()

                else:
                    raise NoViableAltException(self)
                self.state = 1047 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qstate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.QstateContext)
            else:
                return self.getTypedRuleContext(ExpParser.QstateContext,i)


        def TKet(self):
            return self.getToken(ExpParser.TKet, 0)

        def TSub(self):
            return self.getToken(ExpParser.TSub, 0)

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_ket

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKet" ):
                listener.enterKet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKet" ):
                listener.exitKet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKet" ):
                return visitor.visitKet(self)
            else:
                return visitor.visitChildren(self)




    def ket(self):

        localctx = ExpParser.KetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_ket)
        self._la = 0 # Token type
        try:
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ExpParser.T__28, ExpParser.TSub]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ExpParser.TSub:
                    self.state = 1049
                    self.match(ExpParser.TSub)


                self.state = 1052
                self.match(ExpParser.T__28)
                self.state = 1053
                self.qstate()
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ExpParser.T__13:
                    self.state = 1054
                    self.match(ExpParser.T__13)
                    self.state = 1055
                    self.qstate()
                    self.state = 1060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1061
                self.match(ExpParser.TKet)
                pass
            elif token in [ExpParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.match(ExpParser.T__11)
                self.state = 1064
                self.arithExpr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KetsumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maySum(self):
            return self.getTypedRuleContext(ExpParser.MaySumContext,0)


        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_ketsum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKetsum" ):
                listener.enterKetsum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKetsum" ):
                listener.exitKetsum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKetsum" ):
                return visitor.visitKetsum(self)
            else:
                return visitor.visitChildren(self)




    def ketsum(self):

        localctx = ExpParser.KetsumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_ketsum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.maySum()
            self.state = 1068
            self.arithExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QstateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def additiveOp(self):
            return self.getTypedRuleContext(ExpParser.AdditiveOpContext,0)


        def ketsum(self):
            return self.getTypedRuleContext(ExpParser.KetsumContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_qstate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQstate" ):
                listener.enterQstate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQstate" ):
                listener.exitQstate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQstate" ):
                return visitor.visitQstate(self)
            else:
                return visitor.visitChildren(self)




    def qstate(self):

        localctx = ExpParser.QstateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_qstate)
        try:
            self.state = 1073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1070
                self.arithExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1071
                self.additiveOp()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1072
                self.ketsum()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.BindingContext)
            else:
                return self.getTypedRuleContext(ExpParser.BindingContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_bindings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindings" ):
                listener.enterBindings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindings" ):
                listener.exitBindings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBindings" ):
                return visitor.visitBindings(self)
            else:
                return visitor.visitChildren(self)




    def bindings(self):

        localctx = ExpParser.BindingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_bindings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.binding()
            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ExpParser.T__13:
                self.state = 1076
                self.match(ExpParser.T__13)
                self.state = 1077
                self.binding()
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def typeT(self):
            return self.getTypedRuleContext(ExpParser.TypeTContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinding" ):
                listener.enterBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinding" ):
                listener.exitBinding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinding" ):
                return visitor.visitBinding(self)
            else:
                return visitor.visitChildren(self)




    def binding(self):

        localctx = ExpParser.BindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(ExpParser.ID)
            self.state = 1084
            self.match(ExpParser.T__2)
            self.state = 1085
            self.typeT()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeOptionalBindingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeOptionalBinding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.TypeOptionalBindingContext)
            else:
                return self.getTypedRuleContext(ExpParser.TypeOptionalBindingContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_typeOptionalBindings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOptionalBindings" ):
                listener.enterTypeOptionalBindings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOptionalBindings" ):
                listener.exitTypeOptionalBindings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeOptionalBindings" ):
                return visitor.visitTypeOptionalBindings(self)
            else:
                return visitor.visitChildren(self)




    def typeOptionalBindings(self):

        localctx = ExpParser.TypeOptionalBindingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_typeOptionalBindings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.typeOptionalBinding()
            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ExpParser.T__13:
                self.state = 1088
                self.match(ExpParser.T__13)
                self.state = 1089
                self.typeOptionalBinding()
                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeOptionalBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def typeT(self):
            return self.getTypedRuleContext(ExpParser.TypeTContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_typeOptionalBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOptionalBinding" ):
                listener.enterTypeOptionalBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOptionalBinding" ):
                listener.exitTypeOptionalBinding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeOptionalBinding" ):
                return visitor.visitTypeOptionalBinding(self)
            else:
                return visitor.visitChildren(self)




    def typeOptionalBinding(self):

        localctx = ExpParser.TypeOptionalBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_typeOptionalBinding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(ExpParser.ID)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ExpParser.T__2:
                self.state = 1096
                self.match(ExpParser.T__2)
                self.state = 1097
                self.typeT()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qrange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.QrangeContext)
            else:
                return self.getTypedRuleContext(ExpParser.QrangeContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_locus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocus" ):
                listener.enterLocus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocus" ):
                listener.exitLocus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocus" ):
                return visitor.visitLocus(self)
            else:
                return visitor.visitChildren(self)




    def locus(self):

        localctx = ExpParser.LocusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_locus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.qrange()
            self.state = 1105
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1101
                    self.match(ExpParser.T__13)
                    self.state = 1102
                    self.qrange() 
                self.state = 1107
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_crange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrange" ):
                listener.enterCrange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrange" ):
                listener.exitCrange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCrange" ):
                return visitor.visitCrange(self)
            else:
                return visitor.visitChildren(self)




    def crange(self):

        localctx = ExpParser.CrangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_crange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(ExpParser.T__33)
            self.state = 1109
            self.arithExpr(0)
            self.state = 1110
            self.match(ExpParser.T__13)
            self.state = 1111
            self.arithExpr(0)
            self.state = 1112
            self.match(ExpParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = ExpParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.match(ExpParser.T__33)
            self.state = 1115
            self.arithExpr(0)
            self.state = 1116
            self.match(ExpParser.T__34)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QsliceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.start = None # ArithExprContext
            self.end = None # ArithExprContext

        def arithExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.ArithExprContext)
            else:
                return self.getTypedRuleContext(ExpParser.ArithExprContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_qslice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQslice" ):
                listener.enterQslice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQslice" ):
                listener.exitQslice(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQslice" ):
                return visitor.visitQslice(self)
            else:
                return visitor.visitChildren(self)




    def qslice(self):

        localctx = ExpParser.QsliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_qslice)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.match(ExpParser.T__33)
            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ExpParser.T__4) | (1 << ExpParser.T__7) | (1 << ExpParser.T__25) | (1 << ExpParser.T__26) | (1 << ExpParser.T__27) | (1 << ExpParser.T__28) | (1 << ExpParser.T__29) | (1 << ExpParser.T__30) | (1 << ExpParser.T__31) | (1 << ExpParser.T__32) | (1 << ExpParser.T__33) | (1 << ExpParser.TSub))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ExpParser.If - 73)) | (1 << (ExpParser.TrueLiteral - 73)) | (1 << (ExpParser.FalseLiteral - 73)) | (1 << (ExpParser.Number - 73)) | (1 << (ExpParser.ID - 73)))) != 0):
                self.state = 1119
                localctx.start = self.arithExpr(0)


            self.state = 1122
            self.match(ExpParser.T__36)
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ExpParser.T__4) | (1 << ExpParser.T__7) | (1 << ExpParser.T__25) | (1 << ExpParser.T__26) | (1 << ExpParser.T__27) | (1 << ExpParser.T__28) | (1 << ExpParser.T__29) | (1 << ExpParser.T__30) | (1 << ExpParser.T__31) | (1 << ExpParser.T__32) | (1 << ExpParser.T__33) | (1 << ExpParser.TSub))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ExpParser.If - 73)) | (1 << (ExpParser.TrueLiteral - 73)) | (1 << (ExpParser.FalseLiteral - 73)) | (1 << (ExpParser.Number - 73)) | (1 << (ExpParser.ID - 73)))) != 0):
                self.state = 1123
                localctx.end = self.arithExpr(0)


            self.state = 1126
            self.match(ExpParser.T__34)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdindexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def index(self):
            return self.getTypedRuleContext(ExpParser.IndexContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_idindex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdindex" ):
                listener.enterIdindex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdindex" ):
                listener.exitIdindex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdindex" ):
                return visitor.visitIdindex(self)
            else:
                return visitor.visitChildren(self)




    def idindex(self):

        localctx = ExpParser.IdindexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_idindex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.match(ExpParser.ID)
            self.state = 1129
            self.index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QrangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ExpParser.ID, 0)

        def fcall(self):
            return self.getTypedRuleContext(ExpParser.FcallContext,0)


        def index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.IndexContext)
            else:
                return self.getTypedRuleContext(ExpParser.IndexContext,i)


        def crange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.CrangeContext)
            else:
                return self.getTypedRuleContext(ExpParser.CrangeContext,i)


        def qslice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.QsliceContext)
            else:
                return self.getTypedRuleContext(ExpParser.QsliceContext,i)


        def getRuleIndex(self):
            return ExpParser.RULE_qrange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQrange" ):
                listener.enterQrange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQrange" ):
                listener.exitQrange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQrange" ):
                return visitor.visitQrange(self)
            else:
                return visitor.visitChildren(self)




    def qrange(self):

        localctx = ExpParser.QrangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_qrange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 1131
                self.match(ExpParser.ID)
                pass

            elif la_ == 2:
                self.state = 1132
                self.fcall()
                pass


            self.state = 1138 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1138
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                    if la_ == 1:
                        self.state = 1135
                        self.index()
                        pass

                    elif la_ == 2:
                        self.state = 1136
                        self.crange()
                        pass

                    elif la_ == 3:
                        self.state = 1137
                        self.qslice()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 1140 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumexpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(ExpParser.Number, 0)

        def TSub(self):
            return self.getToken(ExpParser.TSub, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_numexp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumexp" ):
                listener.enterNumexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumexp" ):
                listener.exitNumexp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumexp" ):
                return visitor.visitNumexp(self)
            else:
                return visitor.visitChildren(self)




    def numexp(self):

        localctx = ExpParser.NumexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_numexp)
        try:
            self.state = 1145
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ExpParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1142
                self.match(ExpParser.Number)
                pass
            elif token in [ExpParser.TSub]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1143
                self.match(ExpParser.TSub)
                self.state = 1144
                self.match(ExpParser.Number)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseTy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExpParser.BaseTyContext)
            else:
                return self.getTypedRuleContext(ExpParser.BaseTyContext,i)


        def typeT(self):
            return self.getTypedRuleContext(ExpParser.TypeTContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_typeT

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeT" ):
                listener.enterTypeT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeT" ):
                listener.exitTypeT(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeT" ):
                return visitor.visitTypeT(self)
            else:
                return visitor.visitChildren(self)




    def typeT(self):

        localctx = ExpParser.TypeTContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_typeT)
        self._la = 0 # Token type
        try:
            self.state = 1165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1147
                self.baseTy(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ExpParser.T__33, ExpParser.T__38, ExpParser.T__39, ExpParser.T__40, ExpParser.TNat, ExpParser.TReal, ExpParser.TInt, ExpParser.TBool, ExpParser.TBV]:
                    self.state = 1148
                    self.baseTy(0)
                    pass
                elif token in [ExpParser.T__4]:
                    self.state = 1149
                    self.match(ExpParser.T__4)
                    self.state = 1150
                    self.baseTy(0)
                    self.state = 1155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ExpParser.T__13:
                        self.state = 1151
                        self.match(ExpParser.T__13)
                        self.state = 1152
                        self.baseTy(0)
                        self.state = 1157
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1158
                    self.match(ExpParser.T__5)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1162
                self.match(ExpParser.T__37)
                self.state = 1163
                self.typeT()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseTyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ExpParser.RULE_baseTy

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ArrayTypeContext(BaseTyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExpParser.BaseTyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def baseTy(self):
            return self.getTypedRuleContext(ExpParser.BaseTyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)


    class ArrayWithSizeTypeContext(BaseTyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExpParser.BaseTyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def baseTy(self):
            return self.getTypedRuleContext(ExpParser.BaseTyContext,0)

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayWithSizeType" ):
                listener.enterArrayWithSizeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayWithSizeType" ):
                listener.exitArrayWithSizeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayWithSizeType" ):
                return visitor.visitArrayWithSizeType(self)
            else:
                return visitor.visitChildren(self)


    class BoolTypeContext(BaseTyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExpParser.BaseTyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TBool(self):
            return self.getToken(ExpParser.TBool, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolType" ):
                listener.enterBoolType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolType" ):
                listener.exitBoolType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolType" ):
                return visitor.visitBoolType(self)
            else:
                return visitor.visitChildren(self)


    class DynamicArrayTypeContext(BaseTyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExpParser.BaseTyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(ExpParser.LT, 0)
        def baseTy(self):
            return self.getTypedRuleContext(ExpParser.BaseTyContext,0)

        def GT(self):
            return self.getToken(ExpParser.GT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicArrayType" ):
                listener.enterDynamicArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicArrayType" ):
                listener.exitDynamicArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicArrayType" ):
                return visitor.visitDynamicArrayType(self)
            else:
                return visitor.visitChildren(self)


    class SetTypeContext(BaseTyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExpParser.BaseTyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(ExpParser.LT, 0)
        def baseTy(self):
            return self.getTypedRuleContext(ExpParser.BaseTyContext,0)

        def GT(self):
            return self.getToken(ExpParser.GT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetType" ):
                listener.enterSetType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetType" ):
                listener.exitSetType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetType" ):
                return visitor.visitSetType(self)
            else:
                return visitor.visitChildren(self)


    class QBitStringTypeContext(BaseTyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExpParser.BaseTyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQBitStringType" ):
                listener.enterQBitStringType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQBitStringType" ):
                listener.exitQBitStringType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQBitStringType" ):
                return visitor.visitQBitStringType(self)
            else:
                return visitor.visitChildren(self)


    class NaturalTypeContext(BaseTyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExpParser.BaseTyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TNat(self):
            return self.getToken(ExpParser.TNat, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalType" ):
                listener.enterNaturalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalType" ):
                listener.exitNaturalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNaturalType" ):
                return visitor.visitNaturalType(self)
            else:
                return visitor.visitChildren(self)


    class BitVectorTypeContext(BaseTyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExpParser.BaseTyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TBV(self):
            return self.getToken(ExpParser.TBV, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitVectorType" ):
                listener.enterBitVectorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitVectorType" ):
                listener.exitBitVectorType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitVectorType" ):
                return visitor.visitBitVectorType(self)
            else:
                return visitor.visitChildren(self)


    class RealTypeContext(BaseTyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExpParser.BaseTyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TReal(self):
            return self.getToken(ExpParser.TReal, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealType" ):
                listener.enterRealType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealType" ):
                listener.exitRealType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRealType" ):
                return visitor.visitRealType(self)
            else:
                return visitor.visitChildren(self)


    class IntTypeContext(BaseTyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExpParser.BaseTyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TInt(self):
            return self.getToken(ExpParser.TInt, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntType" ):
                listener.enterIntType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntType" ):
                listener.exitIntType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntType" ):
                return visitor.visitIntType(self)
            else:
                return visitor.visitChildren(self)



    def baseTy(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ExpParser.BaseTyContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_baseTy, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                localctx = ExpParser.NaturalTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1168
                self.match(ExpParser.TNat)
                pass

            elif la_ == 2:
                localctx = ExpParser.RealTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1169
                self.match(ExpParser.TReal)
                pass

            elif la_ == 3:
                localctx = ExpParser.IntTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1170
                self.match(ExpParser.TInt)
                pass

            elif la_ == 4:
                localctx = ExpParser.BoolTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1171
                self.match(ExpParser.TBool)
                pass

            elif la_ == 5:
                localctx = ExpParser.BitVectorTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1172
                self.match(ExpParser.TBV)
                pass

            elif la_ == 6:
                localctx = ExpParser.ArrayTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1173
                self.match(ExpParser.T__33)
                self.state = 1174
                self.baseTy(0)
                self.state = 1175
                self.match(ExpParser.T__34)
                pass

            elif la_ == 7:
                localctx = ExpParser.DynamicArrayTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1177
                self.match(ExpParser.T__38)
                self.state = 1178
                self.match(ExpParser.LT)
                self.state = 1179
                self.baseTy(0)
                self.state = 1180
                self.match(ExpParser.GT)
                pass

            elif la_ == 8:
                localctx = ExpParser.SetTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1182
                self.match(ExpParser.T__39)
                self.state = 1183
                self.match(ExpParser.LT)
                self.state = 1184
                self.baseTy(0)
                self.state = 1185
                self.match(ExpParser.GT)
                pass

            elif la_ == 9:
                localctx = ExpParser.ArrayWithSizeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1187
                self.match(ExpParser.T__33)
                self.state = 1188
                self.baseTy(0)
                self.state = 1189
                self.match(ExpParser.T__13)
                self.state = 1190
                self.arithExpr(0)
                self.state = 1191
                self.match(ExpParser.T__34)
                pass

            elif la_ == 10:
                localctx = ExpParser.QBitStringTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1193
                self.match(ExpParser.T__40)
                self.state = 1194
                self.match(ExpParser.T__33)
                self.state = 1195
                self.arithExpr(0)
                self.state = 1196
                self.match(ExpParser.T__34)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1207
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ExpParser.ArrayWithSizeTypeContext(self, ExpParser.BaseTyContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_baseTy)
                    self.state = 1200
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1201
                    self.match(ExpParser.T__33)
                    self.state = 1202
                    self.arithExpr(0)
                    self.state = 1203
                    self.match(ExpParser.T__34) 
                self.state = 1209
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QtyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nor(self):
            return self.getToken(ExpParser.Nor, 0)

        def Had(self):
            return self.getToken(ExpParser.Had, 0)

        def En(self):
            return self.getToken(ExpParser.En, 0)

        def arithExpr(self):
            return self.getTypedRuleContext(ExpParser.ArithExprContext,0)


        def aaType(self):
            return self.getTypedRuleContext(ExpParser.AaTypeContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_qty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQty" ):
                listener.enterQty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQty" ):
                listener.exitQty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQty" ):
                return visitor.visitQty(self)
            else:
                return visitor.visitChildren(self)




    def qty(self):

        localctx = ExpParser.QtyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_qty)
        try:
            self.state = 1219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1210
                self.match(ExpParser.Nor)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.match(ExpParser.Had)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1212
                self.match(ExpParser.En)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1213
                self.match(ExpParser.En)
                self.state = 1214
                self.match(ExpParser.T__4)
                self.state = 1215
                self.arithExpr(0)
                self.state = 1216
                self.match(ExpParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1218
                self.aaType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AA(self):
            return self.getToken(ExpParser.AA, 0)

        def qrange(self):
            return self.getTypedRuleContext(ExpParser.QrangeContext,0)


        def getRuleIndex(self):
            return ExpParser.RULE_aaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAaType" ):
                listener.enterAaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAaType" ):
                listener.exitAaType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAaType" ):
                return visitor.visitAaType(self)
            else:
                return visitor.visitChildren(self)




    def aaType(self):

        localctx = ExpParser.AaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_aaType)
        try:
            self.state = 1227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1221
                self.match(ExpParser.AA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1222
                self.match(ExpParser.AA)
                self.state = 1223
                self.match(ExpParser.T__4)
                self.state = 1224
                self.qrange()
                self.state = 1225
                self.match(ExpParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAdd(self):
            return self.getToken(ExpParser.TAdd, 0)

        def TSub(self):
            return self.getToken(ExpParser.TSub, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_additiveOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOp" ):
                listener.enterAdditiveOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOp" ):
                listener.exitAdditiveOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveOp" ):
                return visitor.visitAdditiveOp(self)
            else:
                return visitor.visitChildren(self)




    def additiveOp(self):

        localctx = ExpParser.AdditiveOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_additiveOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            _la = self._input.LA(1)
            if not(_la==ExpParser.TAdd or _la==ExpParser.TSub):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TMul(self):
            return self.getToken(ExpParser.TMul, 0)

        def TDiv(self):
            return self.getToken(ExpParser.TDiv, 0)

        def TMod(self):
            return self.getToken(ExpParser.TMod, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_multiplicativeOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOp" ):
                listener.enterMultiplicativeOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOp" ):
                listener.exitMultiplicativeOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeOp" ):
                return visitor.visitMultiplicativeOp(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeOp(self):

        localctx = ExpParser.MultiplicativeOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_multiplicativeOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ExpParser.TMul) | (1 << ExpParser.TDiv) | (1 << ExpParser.TMod))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExponentialOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TExp(self):
            return self.getToken(ExpParser.TExp, 0)

        def TXor(self):
            return self.getToken(ExpParser.TXor, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_exponentialOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentialOp" ):
                listener.enterExponentialOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentialOp" ):
                listener.exitExponentialOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentialOp" ):
                return visitor.visitExponentialOp(self)
            else:
                return visitor.visitChildren(self)




    def exponentialOp(self):

        localctx = ExpParser.ExponentialOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_exponentialOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            _la = self._input.LA(1)
            if not(_la==ExpParser.TExp or _la==ExpParser.TXor):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TrueLiteral(self):
            return self.getToken(ExpParser.TrueLiteral, 0)

        def FalseLiteral(self):
            return self.getToken(ExpParser.FalseLiteral, 0)

        def getRuleIndex(self):
            return ExpParser.RULE_boolLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolLiteral" ):
                listener.enterBoolLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolLiteral" ):
                listener.exitBoolLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolLiteral" ):
                return visitor.visitBoolLiteral(self)
            else:
                return visitor.visitChildren(self)




    def boolLiteral(self):

        localctx = ExpParser.BoolLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_boolLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            _la = self._input.LA(1)
            if not(_la==ExpParser.TrueLiteral or _la==ExpParser.FalseLiteral):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[54] = self.arithExprWithSum_sempred
        self._predicates[55] = self.arithExpr_sempred
        self._predicates[86] = self.baseTy_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def arithExprWithSum_sempred(self, localctx:ArithExprWithSumContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

    def arithExpr_sempred(self, localctx:ArithExprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def baseTy_sempred(self, localctx:BaseTyContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         




