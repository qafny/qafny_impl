//This is the QFT adder algorithm, it has two registers, and controls the first one to the second one.
//a and b are both natural number < 2^n
//Fixpoint rz_adder' (x:var) (n:nat) (size:nat) (M: nat -> bool) :=
 // match n with 
 // | 0 => SKIP (x,0)
 // | S m => rz_adder' x m size M ; if M m then SR (size - n) x else SKIP (x,m)
 // end.

//Definition rz_adder (x:var) (n:nat) (M:nat -> bool) := rz_adder' x n n M.

method QAdder(q : Q[n], p : Q[n], n:nat, a:nat, b:nat)
  //requires order(x,N) == r //define order function
  //requires order(x,N) == r //define order function
  requires { q[0 , n) : Nor ↦ |a⟩ }
  requires { p[0 , n) : Nor ↦ |b⟩ }

  //please fill the ensures. This means the final result. It is also in Andrew Childs' notes
  ensures { q[0 , n) : Nor ↦ |a⟩ }
  ensures { p[0 , n) : Nor ↦ |a+b⟩ }
{

  p[0, n) *= QFT; //if we apply QFT to Nor, it can be in En or Had, we can creat cast-op to let user select.
  //we need a new way to express Φ type Had expression, for applying SR gates.
  assert { p[0 .. n] : Had ↦ ⊗ i ∈ [0, n) . Φ(2^i * b) };
  
  for i in [0, n) with q[i]
    invariant { p[0 .. n] : Had ↦ ⊗ i ∈ [0, n) . Φ(2^i * (b + ∑ k ∈ [0, i). 2^k * a[i])) };
    invariant { q[0 , n) : Nor ↦ |a⟩}
  {
    //SR m is a series of phase gate, rotating from m+1 to 1, starting from qubit 0 position
    //the nice feature of SR gate is that, if the p[0,n) is in QFT type, it does not create entanglement.
    //we will need to formula this as a lemma, or assumption.
    p[0, N) *= SR(n - i - 1);
  }
}  


method QAdderFull(q : Q[n], p : Q[n], n:nat, f: nat -> nat)
  //q and p are in entnaglement already.
  requires { q[0 , n),p[0, n) : En ↦ ∑ i ∈ [0, n) . |i, f(i)⟩ }
  ensures { q[0 , n),p[0, n) : En ↦ ∑ i ∈ [0, n) . |i, i + f(i)⟩ }
{
   //we can apply the summation formula below, for every pair of i, and f(i), we apply QAdder.
   SumFormula(i ∈ [0, n). QAdder(q,p,n,i,f(i)));
   //the summsion formula is equivalent to a for loop. if we do not want to implement the sum formula. I am fine with the for loop.
}  
