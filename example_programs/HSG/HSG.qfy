//This is the hiden subgroup for abliean group algorithm. The document is at Andrew Childs' lecture notes at page 25.
//The HSG and Shor's algorithm flow is basically the same.


function kappa(a:nat,y:nat) : real

lemma {:axiom} kappaProperty(a:nat,b:nat,y:nat)
  ensures kappa(a+b,y) == kappa(a,y) * kappa(b,y)

// I tried to implement the lemma you described, but I realized I don't know what you mean by c and x
lemma {:axiom} endProperty(y:nat, c, n:nat, r:nat, x)
  requires y == c * 2^n / r
  ensures ∑ k ∈ [0 .. 2^n / r] . ω (r * k * x, 2^n) == 4 / (pi * pi * r)

method HSG(q : Q[n], p : Q[n], n:nat, f : [Bool] -> [Bool], H: set<nat>, r:nat) returns (y:nat, p : real, k:set<nat>)
  requires forall k :: 0 <= k < 2^n ==> forall i :: 0 <= i < 2^n ==> f(n2b(k)) = f(n2b(i)) ==> (x-y) in H
  requires |H| == r
  requires { q[0 , n) : Nor ↦ |0⟩ }
  requires { p[0 , n) : Nor ↦ |0⟩ }
  //we should have a way of only specifying basis.
  //but we also care about amplitudes here.
  ensures isGen(y) //we will get y as the final measurement result of the generator of group H.
                   //We can define the isGen predicate to be forall element h in H, it is a multiplication of y.
  ensures p == |H| / 2^n //The group number should be |G| instead of 2^n. 
{
  k *= [];

  for _ in range(log(2^n))
  {
    q[0, n) *= H;
    
    for i in [0, n) with q[i]
      separates q[0, i), p[0, n)
      invariant {
        q[0, i), p[0, n) : En ↦ ∑ k ∈ [0, Pow2(i)) . 1 / sqrt(2^n) . | k , ∑ j ∈ [0, i) . f(n2b(k))[j] ⟩
      }
      invariant {
        q [i , n) : Had ↦ |+⟩
      }
    {
      //quantum mod-mult requires gcd(base,N) == 1 to implement, otherwise, it is not implementable.
      p[0, N) *= λ ((x: Q n, y:Q n) => (x, ((y + f(x)))));

      // This is super hacky, but I have no good way to do this now....
      // TODO: find out one way to take the reference of the underlying range
      // e.g. [[ p[0 .. N] ]] ?
      //#LemmaPowEquiv(p_seq'nat'_7__emit, base, i, N);
    }

    v,prob *= measure(p);//we do not care about the v and prob value here. only the partial measurement of p
    assert { q[0, n) : En ↦ ∑ h ∈ [0, r) . 1 / sqrt(2^n / r) . |v + h⟩ }; //we can keep the format of sqrt(2^n / r), and I think the case is general in any algorithm
    q[0,n) *= QFT;
    //we need to have a way of dealing with 2^n / r, the sum actually does not matter, we need to say 2^n/r as nat is 2^n/r round to bottom nat
    //in the following ω (v * x + r * k * x, 2^n) can be break down ω (v * x) * ω (r * k * x, 2^n), and the first one is one since it can be moved out of the sum k.
    assert { q[0 .. n] : En ↦ ∑ y ∈ [0, 2^n) . 1 / sqrt(r) * 1 / sqrt(2^n) . ∑ h ∈ [0 .. r] . kappa(v,y) * kappa(h, y) . |y⟩ };
    y,p *= measure(q);
    //will need to support a lemma (does not need proof), to show that ∑ k ∈ [0 .. 2^n / r] . ω (r * k * x, 2^n) is 4 / (pi * pi * r) when y = c * 2^n / r

    // TODO
    k := k /\ kernel(y)
  }
}  

//we will also need to add post processing analysis for the hiden subgroup, to get all the groups in G.
//This will require some setup for the probablity theories about the possible number of tries to get all the possible group generators.

// my attempt at implementing the logic for repeatedly computing the kernel
// unsure whether the intersection operator will work like this
method HSGParent(q : Q[n], p : Q[n], n:nat, f : [Bool] -> [Bool], H: set<nat>, r:nat) returns (ker: set<nat>)

{
  ker := [];
  for _ in range(log(2^n)) // |G| iterations
  {
    y, p, k := HSG(q, p, n, f, H, r);
    ker := ker /\ k;
  }
}