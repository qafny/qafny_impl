// The SWAP Test
// 2. Quantum Fingerprinting without Shared Keys
// https://arxiv.org/pdf/quant-ph/0102001.pdf 

// q and p are messages, we want to check if they are equal. r is initialized to all zeroes
// r is one qubit. q and p are n qubits.
method swap(q : Q[1], p : Q[1])
  ensures { q[0] == old(p[0]) }
  ensures { p[0] == old(q[0]) }
{
      if (p[0]) { q[0] *= q[0] +1; }
      if (q[0]) { p[0] *= p[0] +1; }
      if (p[0]) { q[0] *= q[0] +1; }
}

method nswap(q: Q[n], p: Q[n], n : nat)
  ensures { q[0,n) == old(p[0,n)) }
  ensures { p[0,n) == old(q[0,n)) }
{
      for i in [0,n)
      invariant { forall k in [0,i] , q[0,k) == old(p[0,k)) }
      invariant { forall k in [0,i] , p[0,k) == old(q[0,k)) }
      {
        swap(q[i], p[i])
      }
}

method SWAPTest(q: Q[n], p: Q[n], r: Q[1], n : nat) returns (y:nat, prob:real)
    requires { r[0] : Nor ↦ |0⟩ }
    requires { q[0,n) : EN ↦ ∑ k ∈ [0 , 2^n) . a[k] . |k⟩ }
    requires { p[0,n) : EN ↦ ∑ j ∈ [0 , 2^n) . b[j] . |j⟩ }
    ensures { y == 0 ==> prob == 1/2 + 1/2* (∑ k ∈ [0 , 2^n) . a[k] * b[k])  }
    //this fact relies on an axiom that the measurement result of 0 for y is:
    // 1/2 (s ⊗ t + t ⊗ s) 1/2(s ⊗ t + t ⊗ s)^*
    //== 1/4 (s ⊗ t + t ⊗ s) ((s ⊗ t)^* + (t ⊗ s)^*)
    //== 1/4 (s ⊗ t + t ⊗ s) (s^* ⊗ t^* + t^* ⊗ s^*)
    //== 1/4 {(s ⊗ t) (s^* ⊗ t^*) + (t ⊗ s) (s^* ⊗ t^*) + (s ⊗ t) (t^* ⊗ s^*) + (t ⊗ s) (t^* ⊗ s^*)}
    //where (s ⊗ t) (s^* ⊗ t^*) and (t ⊗ s) (t^* ⊗ s^*) both are 1.
    //and (t ⊗ s) (s^* ⊗ t^*) + (s ⊗ t) (t^* ⊗ s^*) == < s | t > == (∑ k ∈ [0 , 2^n) . a[k] * b[k])
    
{
    r[0] *= H;

    // controlled SWAP (controlled by first qubit of r)
    if r[0] // is this a measurment, so wo just do if r[0]
    {
      nswap(q,p);
    }
    
    name_state p[0,n) as s;
    name_state q[0,n) as t;//we can name the EN type state as some states

    assert {r[0],p[0,n),q[0,n) : En ↦ 1/sqrt(2) . |0⟩ ⊗ s ⊗ t + 1/sqrt(2) |1⟩ ⊗ t ⊗ s }

    r[0] *= H; // A typical quantum state projection. turning information to the phase.

    assert {r[0],p[0,n),q[0,n) : En ↦ 1/2 . |+⟩ ⊗ s ⊗ t + 1/2  |-⟩ ⊗ t ⊗ s } 
    
    //converting the state to be based on 0 / 1 computational basis
    assert {r[0],p[0,n),q[0,n) : En ↦ 1/2 . |0⟩ (s ⊗ t + t ⊗ s) + 1/2  |1⟩ ⊗ (s ⊗ t - t ⊗ s) } 
    
    y, prob *= measA(r);//we need a special measurement that will abort the other qubits and the main product is to compute the probablity of y.
    
}





