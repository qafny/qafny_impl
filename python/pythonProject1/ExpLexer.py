# Generated from Exp.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,77,461,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,
        1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,
        1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,
        1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,
        1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
        1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,
        1,53,1,53,1,54,1,54,1,55,1,55,1,55,3,55,366,8,55,1,56,1,56,1,57,
        1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,
        1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,
        1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,68,4,68,407,8,68,
        11,68,12,68,408,1,69,1,69,5,69,413,8,69,10,69,12,69,416,9,69,1,70,
        1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,74,1,75,4,75,
        431,8,75,11,75,12,75,432,1,75,1,75,1,76,1,76,1,76,1,76,5,76,441,
        8,76,10,76,12,76,444,9,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,
        1,77,5,77,455,8,77,10,77,12,77,458,9,77,1,77,1,77,1,442,0,78,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
        95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
        57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,
        133,67,135,68,137,69,139,70,141,71,143,72,145,0,147,73,149,74,151,
        75,153,76,155,77,1,0,5,2,0,931,931,8721,8721,4,0,36,36,65,90,95,
        95,97,122,5,0,36,36,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,
        2,0,10,10,13,13,465,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
        0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
        0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,
        0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
        1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
        0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
        0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,
        135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,
        0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,
        1,0,0,0,1,157,1,0,0,0,3,164,1,0,0,0,5,166,1,0,0,0,7,168,1,0,0,0,
        9,170,1,0,0,0,11,172,1,0,0,0,13,174,1,0,0,0,15,177,1,0,0,0,17,181,
        1,0,0,0,19,185,1,0,0,0,21,187,1,0,0,0,23,192,1,0,0,0,25,194,1,0,
        0,0,27,196,1,0,0,0,29,203,1,0,0,0,31,205,1,0,0,0,33,209,1,0,0,0,
        35,212,1,0,0,0,37,215,1,0,0,0,39,223,1,0,0,0,41,227,1,0,0,0,43,231,
        1,0,0,0,45,236,1,0,0,0,47,238,1,0,0,0,49,240,1,0,0,0,51,242,1,0,
        0,0,53,244,1,0,0,0,55,247,1,0,0,0,57,249,1,0,0,0,59,255,1,0,0,0,
        61,264,1,0,0,0,63,272,1,0,0,0,65,281,1,0,0,0,67,289,1,0,0,0,69,296,
        1,0,0,0,71,300,1,0,0,0,73,305,1,0,0,0,75,309,1,0,0,0,77,314,1,0,
        0,0,79,316,1,0,0,0,81,318,1,0,0,0,83,320,1,0,0,0,85,322,1,0,0,0,
        87,324,1,0,0,0,89,326,1,0,0,0,91,330,1,0,0,0,93,334,1,0,0,0,95,336,
        1,0,0,0,97,340,1,0,0,0,99,345,1,0,0,0,101,348,1,0,0,0,103,351,1,
        0,0,0,105,354,1,0,0,0,107,358,1,0,0,0,109,360,1,0,0,0,111,365,1,
        0,0,0,113,367,1,0,0,0,115,369,1,0,0,0,117,371,1,0,0,0,119,381,1,
        0,0,0,121,383,1,0,0,0,123,386,1,0,0,0,125,389,1,0,0,0,127,392,1,
        0,0,0,129,395,1,0,0,0,131,398,1,0,0,0,133,400,1,0,0,0,135,402,1,
        0,0,0,137,406,1,0,0,0,139,410,1,0,0,0,141,417,1,0,0,0,143,419,1,
        0,0,0,145,421,1,0,0,0,147,423,1,0,0,0,149,425,1,0,0,0,151,430,1,
        0,0,0,153,436,1,0,0,0,155,450,1,0,0,0,157,158,5,109,0,0,158,159,
        5,101,0,0,159,160,5,116,0,0,160,161,5,104,0,0,161,162,5,111,0,0,
        162,163,5,100,0,0,163,2,1,0,0,0,164,165,5,123,0,0,165,4,1,0,0,0,
        166,167,5,58,0,0,167,6,1,0,0,0,168,169,5,125,0,0,169,8,1,0,0,0,170,
        171,5,40,0,0,171,10,1,0,0,0,172,173,5,41,0,0,173,12,1,0,0,0,174,
        175,5,58,0,0,175,176,5,58,0,0,176,14,1,0,0,0,177,178,5,110,0,0,178,
        179,5,111,0,0,179,180,5,116,0,0,180,16,1,0,0,0,181,182,5,61,0,0,
        182,183,5,61,0,0,183,184,5,62,0,0,184,18,1,0,0,0,185,186,5,8614,
        0,0,186,20,1,0,0,0,187,188,5,112,0,0,188,189,5,97,0,0,189,190,5,
        114,0,0,190,191,5,116,0,0,191,22,1,0,0,0,192,193,5,44,0,0,193,24,
        1,0,0,0,194,195,5,8855,0,0,195,26,1,0,0,0,196,197,5,97,0,0,197,198,
        5,115,0,0,198,199,5,115,0,0,199,200,5,101,0,0,200,201,5,114,0,0,
        201,202,5,116,0,0,202,28,1,0,0,0,203,204,5,59,0,0,204,30,1,0,0,0,
        205,206,5,118,0,0,206,207,5,97,0,0,207,208,5,114,0,0,208,32,1,0,
        0,0,209,210,5,58,0,0,210,211,5,61,0,0,211,34,1,0,0,0,212,213,5,42,
        0,0,213,214,5,61,0,0,214,36,1,0,0,0,215,216,5,109,0,0,216,217,5,
        101,0,0,217,218,5,97,0,0,218,219,5,115,0,0,219,220,5,117,0,0,220,
        221,5,114,0,0,221,222,5,101,0,0,222,38,1,0,0,0,223,224,5,115,0,0,
        224,225,5,105,0,0,225,226,5,110,0,0,226,40,1,0,0,0,227,228,5,99,
        0,0,228,229,5,111,0,0,229,230,5,115,0,0,230,42,1,0,0,0,231,232,5,
        115,0,0,232,233,5,113,0,0,233,234,5,114,0,0,234,235,5,116,0,0,235,
        44,1,0,0,0,236,237,5,124,0,0,237,46,1,0,0,0,238,239,5,969,0,0,239,
        48,1,0,0,0,240,241,5,91,0,0,241,50,1,0,0,0,242,243,5,93,0,0,243,
        52,1,0,0,0,244,245,5,45,0,0,245,246,5,62,0,0,246,54,1,0,0,0,247,
        248,5,81,0,0,248,56,1,0,0,0,249,250,5,97,0,0,250,251,5,120,0,0,251,
        252,5,105,0,0,252,253,5,111,0,0,253,254,5,109,0,0,254,58,1,0,0,0,
        255,256,5,102,0,0,256,257,5,117,0,0,257,258,5,110,0,0,258,259,5,
        99,0,0,259,260,5,116,0,0,260,261,5,105,0,0,261,262,5,111,0,0,262,
        263,5,110,0,0,263,60,1,0,0,0,264,265,5,101,0,0,265,266,5,110,0,0,
        266,267,5,115,0,0,267,268,5,117,0,0,268,269,5,114,0,0,269,270,5,
        101,0,0,270,271,5,115,0,0,271,62,1,0,0,0,272,273,5,114,0,0,273,274,
        5,101,0,0,274,275,5,113,0,0,275,276,5,117,0,0,276,277,5,105,0,0,
        277,278,5,114,0,0,278,279,5,101,0,0,279,280,5,115,0,0,280,64,1,0,
        0,0,281,282,5,114,0,0,282,283,5,101,0,0,283,284,5,116,0,0,284,285,
        5,117,0,0,285,286,5,114,0,0,286,287,5,110,0,0,287,288,5,115,0,0,
        288,66,1,0,0,0,289,290,5,102,0,0,290,291,5,111,0,0,291,292,5,114,
        0,0,292,293,5,97,0,0,293,294,5,108,0,0,294,295,5,108,0,0,295,68,
        1,0,0,0,296,297,5,110,0,0,297,298,5,97,0,0,298,299,5,116,0,0,299,
        70,1,0,0,0,300,301,5,114,0,0,301,302,5,101,0,0,302,303,5,97,0,0,
        303,304,5,108,0,0,304,72,1,0,0,0,305,306,5,105,0,0,306,307,5,110,
        0,0,307,308,5,116,0,0,308,74,1,0,0,0,309,310,5,98,0,0,310,311,5,
        111,0,0,311,312,5,111,0,0,312,313,5,108,0,0,313,76,1,0,0,0,314,315,
        5,43,0,0,315,78,1,0,0,0,316,317,5,45,0,0,317,80,1,0,0,0,318,319,
        5,42,0,0,319,82,1,0,0,0,320,321,5,47,0,0,321,84,1,0,0,0,322,323,
        5,37,0,0,323,86,1,0,0,0,324,325,5,94,0,0,325,88,1,0,0,0,326,327,
        5,110,0,0,327,328,5,111,0,0,328,329,5,114,0,0,329,90,1,0,0,0,330,
        331,5,104,0,0,331,332,5,97,0,0,332,333,5,100,0,0,333,92,1,0,0,0,
        334,335,5,72,0,0,335,94,1,0,0,0,336,337,5,81,0,0,337,338,5,70,0,
        0,338,339,5,84,0,0,339,96,1,0,0,0,340,341,5,82,0,0,341,342,5,81,
        0,0,342,343,5,70,0,0,343,344,5,84,0,0,344,98,1,0,0,0,345,346,5,97,
        0,0,346,347,5,97,0,0,347,100,1,0,0,0,348,349,5,101,0,0,349,350,5,
        110,0,0,350,102,1,0,0,0,351,352,5,105,0,0,352,353,5,102,0,0,353,
        104,1,0,0,0,354,355,5,102,0,0,355,356,5,111,0,0,356,357,5,114,0,
        0,357,106,1,0,0,0,358,359,5,955,0,0,359,108,1,0,0,0,360,361,5,10217,
        0,0,361,110,1,0,0,0,362,363,5,105,0,0,363,366,5,110,0,0,364,366,
        5,8712,0,0,365,362,1,0,0,0,365,364,1,0,0,0,366,112,1,0,0,0,367,368,
        7,0,0,0,368,114,1,0,0,0,369,370,5,8853,0,0,370,116,1,0,0,0,371,372,
        5,105,0,0,372,373,5,110,0,0,373,374,5,118,0,0,374,375,5,97,0,0,375,
        376,5,114,0,0,376,377,5,105,0,0,377,378,5,97,0,0,378,379,5,110,0,
        0,379,380,5,116,0,0,380,118,1,0,0,0,381,382,5,46,0,0,382,120,1,0,
        0,0,383,384,5,38,0,0,384,385,5,38,0,0,385,122,1,0,0,0,386,387,5,
        124,0,0,387,388,5,124,0,0,388,124,1,0,0,0,389,390,5,62,0,0,390,391,
        5,61,0,0,391,126,1,0,0,0,392,393,5,60,0,0,393,394,5,61,0,0,394,128,
        1,0,0,0,395,396,5,61,0,0,396,397,5,61,0,0,397,130,1,0,0,0,398,399,
        5,60,0,0,399,132,1,0,0,0,400,401,5,62,0,0,401,134,1,0,0,0,402,403,
        5,61,0,0,403,404,5,62,0,0,404,136,1,0,0,0,405,407,3,145,72,0,406,
        405,1,0,0,0,407,408,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,
        138,1,0,0,0,410,414,3,141,70,0,411,413,3,143,71,0,412,411,1,0,0,
        0,413,416,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,140,1,0,0,
        0,416,414,1,0,0,0,417,418,7,1,0,0,418,142,1,0,0,0,419,420,7,2,0,
        0,420,144,1,0,0,0,421,422,2,48,57,0,422,146,1,0,0,0,423,424,5,64,
        0,0,424,148,1,0,0,0,425,426,5,46,0,0,426,427,5,46,0,0,427,428,5,
        46,0,0,428,150,1,0,0,0,429,431,7,3,0,0,430,429,1,0,0,0,431,432,1,
        0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,435,6,
        75,0,0,435,152,1,0,0,0,436,437,5,47,0,0,437,438,5,42,0,0,438,442,
        1,0,0,0,439,441,9,0,0,0,440,439,1,0,0,0,441,444,1,0,0,0,442,443,
        1,0,0,0,442,440,1,0,0,0,443,445,1,0,0,0,444,442,1,0,0,0,445,446,
        5,42,0,0,446,447,5,47,0,0,447,448,1,0,0,0,448,449,6,76,0,0,449,154,
        1,0,0,0,450,451,5,47,0,0,451,452,5,47,0,0,452,456,1,0,0,0,453,455,
        8,4,0,0,454,453,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,
        1,0,0,0,457,459,1,0,0,0,458,456,1,0,0,0,459,460,6,77,0,0,460,156,
        1,0,0,0,7,0,365,408,414,432,442,456,1,6,0,0
    ]

class ExpLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    Axiom = 29
    Function = 30
    Ensures = 31
    Requires = 32
    Returns = 33
    Forall = 34
    TNat = 35
    TReal = 36
    TInt = 37
    TBool = 38
    TAdd = 39
    TSub = 40
    TMul = 41
    TDiv = 42
    TMod = 43
    TExp = 44
    Nor = 45
    Had = 46
    SHad = 47
    SQFT = 48
    RQFT = 49
    AA = 50
    En = 51
    If = 52
    For = 53
    TCl = 54
    TKet = 55
    TIn = 56
    TSum = 57
    OPlus = 58
    Invariant = 59
    Dot = 60
    And = 61
    OR = 62
    GE = 63
    LE = 64
    EQ = 65
    LT = 66
    GT = 67
    ARROW = 68
    Number = 69
    ID = 70
    Letter = 71
    LetterOrDigit = 72
    AT = 73
    ELLIPSIS = 74
    WS = 75
    Comment = 76
    Line_Comment = 77

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'method'", "'{'", "':'", "'}'", "'('", "')'", "'::'", "'not'", 
            "'==>'", "'\\u21A6'", "'part'", "','", "'\\u2297'", "'assert'", 
            "';'", "'var'", "':='", "'*='", "'measure'", "'sin'", "'cos'", 
            "'sqrt'", "'|'", "'\\u03C9'", "'['", "']'", "'->'", "'Q'", "'axiom'", 
            "'function'", "'ensures'", "'requires'", "'returns'", "'forall'", 
            "'nat'", "'real'", "'int'", "'bool'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'^'", "'nor'", "'had'", "'H'", "'QFT'", "'RQFT'", "'aa'", 
            "'en'", "'if'", "'for'", "'\\u03BB'", "'\\u27E9'", "'\\u2295'", 
            "'invariant'", "'.'", "'&&'", "'||'", "'>='", "'<='", "'=='", 
            "'<'", "'>'", "'=>'", "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>",
            "Axiom", "Function", "Ensures", "Requires", "Returns", "Forall", 
            "TNat", "TReal", "TInt", "TBool", "TAdd", "TSub", "TMul", "TDiv", 
            "TMod", "TExp", "Nor", "Had", "SHad", "SQFT", "RQFT", "AA", 
            "En", "If", "For", "TCl", "TKet", "TIn", "TSum", "OPlus", "Invariant", 
            "Dot", "And", "OR", "GE", "LE", "EQ", "LT", "GT", "ARROW", "Number", 
            "ID", "Letter", "LetterOrDigit", "AT", "ELLIPSIS", "WS", "Comment", 
            "Line_Comment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "Axiom", "Function", "Ensures", "Requires", 
                  "Returns", "Forall", "TNat", "TReal", "TInt", "TBool", 
                  "TAdd", "TSub", "TMul", "TDiv", "TMod", "TExp", "Nor", 
                  "Had", "SHad", "SQFT", "RQFT", "AA", "En", "If", "For", 
                  "TCl", "TKet", "TIn", "TSum", "OPlus", "Invariant", "Dot", 
                  "And", "OR", "GE", "LE", "EQ", "LT", "GT", "ARROW", "Number", 
                  "ID", "Letter", "LetterOrDigit", "DIGIT", "AT", "ELLIPSIS", 
                  "WS", "Comment", "Line_Comment" ]

    grammarFileName = "Exp.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


