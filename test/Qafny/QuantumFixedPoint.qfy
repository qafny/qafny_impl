//Quantum algorithm with fixed point

//dataAt(f:nat -> bool, n:nat, p: Q[n], r: Q[1])
// ensures forall k :: 0 <= k < n ==> dataAt(f, n:nat, p, r) ==> r[0] == 0 ==> f(k) == 0
// ensures forall k :: 0 <= k < n ==> dataAt(f, n:nat, p, r) ==> r[0] == 1 ==> f(k) == 1

method FixedPtSearch(q : Q[1], p: Q[n], n: nat, f: nat -> bool, N: nat) returns (y: nat, p1: real, x: nat, p2: real, k:nat)
  requires m < 2^n
  requires prob(f, true) == sin^2(alpha)
  requires { q[0] : nor ↦ |0⟩ }
  requires { p[0, n) : nor ↦ |0⟩ }
  ensures y == 1 ==> f(x) == 1 && p2 == cos(2 * k * alpha)
{
  q[0] *= H;
  p[0,n) *= H;
  
  r[0] *= new;
  if (q[0]) { dataAt(f, n, p, r);}
  assert {q[0], p[0,n), r[0] : aa(p[0,n)) ↦ part(f,j,k) . sin(alpha) / sqrt(2) |1⟩|j⟩|1⟩ +  ⊗ phi @ (sin(alpha) / sqrt(2) |0⟩|j⟩|0⟩ + cos(alpha) / sqrt(2) |0⟩|k⟩|0⟩ + cos(alpha) / sqrt(2) |1⟩|k⟩|0⟩)  };
  
  y,p := measure(r[0]);
  assert {q[0], p[0,n) : aa(p[0,n) ↦ ⊗ phi };
  
  k := 0;

  while(y==0)
    invariant {q[0], p[0,n) : aa(p[0,n)) ↦ 1/sqrt(cos^2(alpha) + 1/2 sin^2(alpha)) * cos(2 * k * alpha) ⊗ phi  }
  {
    q[0], p[0,n) *= diff(2 * alpha);
    r[0] *= new;
    if (q[0]) { dataAt(f, n, p, r);}
    y,p1 := measure(r[0]);
    k := k + 1;
  }
  x, p2 := measure(p[0, n));
}

