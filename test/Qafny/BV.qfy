method BV(q : Q[n], p : Q[1], n : nat, f : nat -> nat, s : nat) returns { sa: nat}
  requires n >= 1
  requires { q[0 .. n] : nor ↦ |0⟩  }
  requires { p[0] : nor ↦ |1⟩  }
  requires forall k :: 0 <= k < 2^n ==> n2b(f(k)) == n2b(k) . n2b(s)
  ensures sa == s
{
  q[0, n) *= H;
  p[0] *= H;
  q[0,n), p[0] *= λ ((x: Q n, y:Q 1) => (x, ((y + f(x)))));

  assert { q[0 , n) : en ↦ ∑ i ∈  [0, Pow2(n)) . 1 / sqrt(2^n) . ω (f(i), 2) . |i⟩ };
  assert { q[0 , n) : had ↦ |-⟩ } 

  q[0, n) *= H;
  assert { q[0 .. n] : en ↦ ∑ j ∈ [0 .. Pow2(n)] . 1 / sqrt(2^n) . ∑ i ∈ [0 .. Pow2(n)] . ω (f(i) + i * j, 2) . |j⟩ };
  
  sa, prob := measure q[0,n);
  
  assert { sa == s ==> 1 / 2^n . En ↦ ∑ x ∈ [0, 2^n) . (-1)^(x * (s ⊕ y)) == 1 };
  assert { Prob(sa,prob) == 1 / 2^n Norm(∑ i ∈ [0 .. Pow2(n)] . ω (f(i) + i * k, 2))};
}

