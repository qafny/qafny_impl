// Amplitude estimation and counting
// https://arxiv.org/pdf/quant-ph/0005055.pdf
//https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4141242

method {:axiom} uf(p: Q[n], r: Q[1], f: [Bool] -> Bool, n: nat)
  ensures { p[0, n), r[0] : Nor ↦ ω (f(k), 2)  | k ⟩ |-⟩ } //phase-kick-back
    
method qstep(p: Q[n], r: Q[1], f: [Bool] -> Bool, n: nat, t: nat)
  // constrain the q-bits + natural number
  requires t <= Pow2(n)
  requires { p[0, n), r[0] : En ↦ ∑ k ∈ [0, 2^n) . 1 / sqrt(2^n) . | k ⟩|-⟩ } // registers should be in super position + entangled
  ensures { p[0, n),r[0] : En ↦ part(2^n, sin (2*t+1) * theta : f(|k⟩) == 1, cos (2*t+1) * theta : f(|k⟩) == 0) |-⟩ }
{
  
  //the following assertion is a casting operation to partition the basis_vectors into two groups based on f
  assert { p[0, n),r[0] : En ↦ part(2^n, sin theta : f(|k⟩) == 1, cos theta : f(|k⟩) == 0) |-⟩ }
    
  for j in [0, t)
    invariant { q[0,n),r[0] : En ↦ part(2^n, sin (2 * j * theta + theta) : f(|k⟩) == 1, cos (2 * j * theta + theta) : f(|k⟩) == 0) |-⟩ }
  {
    uf(p, r,f, n); //this is the first step in the grover's algorithm
                   //the step marks the first set in the partition as - sin (2 * j * theta + theta)

    
    //the following three step is equivalence to the grover's amp step
    p[0, n) *= QFT;
    if p[0, n) then { r[0] *= r[0] + 1; } //L: reflection
    p[0, n) *= RQFT;
                    //this amplitude value will increase the amplitude of f(k) == 1 group while describing the amplitude of f(k) == 0 group.
                    //for a state (-sin phi, cos phi), it applies cos 2 * theta * sin phi + sin 2 * theta * cos phi to the first piece
                    //and applies - sin 2 * theta * sin phi + cos 2 * theta * cos phi to the second piece
                    //the amp in our system might need to be generalized, we might need to break this operation down to A ; reflect(0); A^*
                    //any structure above will have the same effect as amp (difference in terms of the theta degree)
  }
}

method AmplitudeEstimate(q: Q[n], r: Q[1], p: Q[2n], f: [Bool] -> Bool, n: nat) returns (y: nat, prob: real)
  requires { p[0 , 2n) : Nor ↦ |0⟩ }
  requires { r[0] : Nor ↦ |0⟩ }
  requires { q[0 , n) : Nor ↦ |0⟩ } //L: unsure about notation
  ensures prob >= 8 / pi^2
{
  // induce superposition on the 2 q-bits
  p[0, n) *= H;
  q[0, 2n) *= H;
  r[0] *= r[0] + 1;
  r[0] *= H;
  //r[0] is turned to |-⟩

  //L: is this valid in Dafny?
  //L: have to find a way to prove termination
  for j in [0, n) && q[j] //M: q[j] is the control for qstep for each j in [0, n). When this happens they become entangled.
    invariant { q[0,j), p[0, 2n),r[0] : En ↦ ∑ v ∈ [0, 2^j) . 1/sqrt(2^j) |v⟩ part(2^n, sin (2*v+1) * theta : f(|k⟩) == 1, cos (2*v+1) * theta : f(|k⟩) == 0) |-⟩ }
  {
    qstep(p, r, f, n, 2^j);
  }

  //the following two assertions are the same
  assert { q[0,j),p[0, 2n),r[0] : En ↦ ∑ v ∈ [0, 2^j) . 1/sqrt(2^j) part(sin (2*v+1) * theta : |v⟩ f(|k⟩, 1) + cos (2*v+1) * theta : |v⟩ f(|k⟩, 0)) |-⟩ }
  assert { q[0,j),p[0, 2n),r[0] : En ↦ ∑ v ∈ [0, 2^j) . 1/sqrt(2^j) part(ω ((2 * v + 1) theta / pi, 1) |v⟩ f(|k⟩, 1) +  ω (- (2 * v + 1) theta / pi, 1) |v⟩ f(|k⟩, 1)) |-⟩ }
  
  q[0, n) *= RQFT; //increase the measurement chance of number of element to phase, see theorem 11
  y, prob := meas(q); //
}

method AppxCounting(n:nat, epsilon: real, f: [Bool] -> Bool) returns (a: nat)
    requires n % 2 == 0
    requires epsilon > 0
    requires exists k :: f(n2b(k)) == 1
    ensures |a - t| <= 2/3
    ensures a > 0
{   

    var l := 0;
    var t := 0;
    
    while (t == 0 && 2^l < 2 * sqrt(2^n)))
       decreases 2 * sqrt(2^n) - 2^l
       invariant l < n/2
    {
       l := l + 1; 
       var q[0,l) *= init(l); //q[0,l) Nor ↦ |0⟩
       var p[0,2l) *= init(2l); 
       var r[0] *= init(1);
       var y,prob := AmplitudeEstimate(q,r,p,f,l);
       
       t := 2^n * y;
    }

    var M := ceiling(20*pi^2 * epsilon / 2^l);
    var q[0,n/2) *= init(n);
    var p[0,n) *= init(n);
    var r[0] *= init(1);
    var y,prob := AmplitudeEstimate(q,r,p,f,2^n); 
    t := 2^n * y;
    a = floor(t+0.5);
}