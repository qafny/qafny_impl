//This version of Simon algorithm really shows that Simon algorithm is one of the HSP group
//the key in Simon algorithm is to find the key s. f is a two-to-one function and has a hidden subgroup generated by {0, s}.

method Simon(q : Q[n], p : Q[n], n:nat, f : [Bool] -> [Bool], s : [Bool]) returns (y:nat, p : real)
  requires forall k :: 0 <= k < 2^(n-1) ==> f(n2b(k)) == f(s xor n2b(k+2^n)) //we can assume that structure of f, because the two pairs in f are k and k+2^n.
  requires b2n(s) != 0
    // we can assume that all elements in the function are lined up with, without losing generality, since we do not rely on the structure
  requires { q[0 , n) : Nor ↦ |0⟩ }
  requires { p[0 , n) : Nor ↦ |0⟩ }
  //we should have a way of only specifying basis.
  //but we also care about amplitudes here.
  ensures n2b(y) . s == 0 ==>  p == 0
  ensures n2b(y) . s == 1 ==> p == 1 / 2^(n-1)
{
  q[0, n) *= H; //a normal H gate, turn q[0,n) to had type array.
  
  //the loop verification is the same as Shor's algorithm. Each loop step, we include one qubit from q[i] to the group q[0,i),p[0,n)
  for i in [0, n) with q[i]
    separates q[0, i), p[0, n)
    invariant {
      q[0, i), p[0, n) : En ↦ ∑ k ∈ [0, 2^i) . 1 / sqrt(2^n) . | k , ∑ j ∈ [0, i) . f(n2b(k))[j] ⟩
      //∑ j ∈ [0, i) . f(n2b(k))[j] might be hard to do, the ∑ j ∈ [0, i) . f(n2b(k))[j] essentially means f(k) where k < 2^i, or we can say f(k % 2^i)
    }
    invariant {
      q [i , n) : Had ↦ |+⟩ // |+⟩ and |-⟩ should be two special states (|+⟩ = 1 / sqrt(2) (|0⟩ + |1⟩) and |-⟩ 1 / sqrt(2) (|0⟩ - |1⟩) )
                            // 1 / sqrt(2) can be implemented as 1 / 2
    }
  {
    //quantum mod-mult requires gcd(base,N) == 1 to implement, otherwise, it is not implementable.
    p[0, n) *= λ ((x: Q[n], y:Q[n]) => (x, ((y + f(x)))));

    // This is super hacky, but I have no good way to do this now....
    // TODO: find out one way to take the reference of the underlying range
    // e.g. [[ p[0 .. N] ]] ?
    //#LemmaPowEquiv(p_seq'nat'_7__emit, base, i, N);
  }

  //q[0, n), p[0, n) : En ↦ ∑ k ∈ [0, 2^n) . 1 / sqrt(2^n) . | k ⟩| f(k) ⟩

  q[0,n) *= H; //similar to the RQFT at the end of Shor's algorithm. Here, we transfer the information in basis to phase
  //the 1 / sqrt(2^n) * 1 / sqrt(2^n) can be rewritten as 1 / 2^n, but we can keep it in 1 / sqrt(2^n) * 1 / sqrt(2^n) or 1/ (sqrt(2^n) * sqrt(2^n))
  //ω (k * y, 2) = (-1)^{k * y}
  //the Dafny implementation should be a two dimentional array.
  //we can push some optimization in the two dimentional array, since this is a special case.
  //the key here is that the two basis ket y and f(k) are strongly connected. We will only utilize the fact that k . y = 0 case.
  //k . y = 1, it means that forall v, k[v] xor y[v] == true. and when k . y = 1 ,  ∑ k ∈ [0 .. 2^n] . ω (k . y, 2) is always 0.
  //since f is a two to one function, if k . y = 1, then it means that f(k) = 0 and f(k xor s) = 1, so the sign of  ω (k . y, 2) for these two cases are opposite
  //so the terms will cancel out and the probability becomes 0.
  //then we can measures out different cases of k_z . y_z = 0 , and then utilize the outputs as a linear system to get s.
  assert { q[0,n),p[0,n) : En ↦ ∑ y ∈ [0, 2^n) . 1 / sqrt(2^n) * 1 / sqrt(2^n) . ∑ k ∈ [0 .. 2^n] . ω (k . y, 2) . |y⟩ |f(k)⟩ };
  y,p *= measure(q);
  //we will need the post-analysis leading to the above result set up in https://en.wikipedia.org/wiki/Simon%27s_problem
}  

