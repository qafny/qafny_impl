// The SWAP Test
// 2. Quantum Fingerprinting without Shared Keys
// https://arxiv.org/pdf/quant-ph/0102001.pdf 

method swap(q : Q[1], p : Q[1])
  requires { q[0] : nor ↦ ⊗ x }
  requires { p[0] : nor ↦ ⊗ y }
  ensures { q[0] : nor ↦ ⊗ y }
  ensures { p[0] : nor ↦ ⊗ x }
{
      if (p[0]) { q[0] *= q[0] +1; }
      if (q[0]) { p[0] *= p[0] +1; }
      if (p[0]) { q[0] *= q[0] +1; }
}

method nswap(q: Q[n], p: Q[n], n : nat)
  requires { q[0,n) : nor ↦ ⊗ x }
  requires { p[0,n) : nor ↦ ⊗ y }
  ensures { q[0,n) : nor ↦ ⊗ y }
  ensures { p[0,n) : nor ↦ ⊗ x }
{
      for i in [0,n)
      invariant { forall k in [0,i) , q[0,k) == old(p[0,k)) }
      invariant { forall k in [0,i) , p[0,k) == old(q[0,k)) }
      {
        swap(q[i], p[i])
      }
}

method SWAPTest(q: Q[n], p: Q[n], r: Q[1], n : nat) returns (y:nat, prob:real)
    requires { r[0] : nor ↦ |0⟩ }
    requires { q[0,n) : en ↦ ∑ k ∈ [0 , 2^n) . x[k] }
    requires { p[0,n) : en ↦ ∑ j ∈ [0 , 2^n) . y[j] }
    ensures { y == 0 ==> prob == 1/2 + 1/2* (∑ k ∈ [0 , 2^n) . a[k] * b[k])  }    
{
    r[0] *= H;

    if r[0] // is this a measurment, so wo just do if r[0]
    {
      nswap(q,p);
    }

    assert {r[0],p[0,n),q[0,n) : en(3) ↦ ∑ k ∈ [0 , 2^n) . ∑ j ∈ [0 , 2^n) . 1/sqrt(2) |0⟩  ⊗ x[k] ⊗ y[j] + ∑ k ∈ [0 , 2^n) . ∑ j ∈ [0 , 2^n) . 1/sqrt(2) |1⟩ ⊗ y[j]  ⊗ x[k] }

    r[0] *= H; 

    assert {r[0],p[0,n),q[0,n) : en(4) ↦ 1/2 . ∑ t ∈ [0 , 2) . ∑ k ∈ [0 , 2^n) . ∑ j ∈ [0 , 2^n) . 1/sqrt(2) |t⟩  ⊗ x[k] ⊗ y[j] 
                                                        + ∑ t ∈ [0 , 2) . ∑ k ∈ [0 , 2^n) . ∑ j ∈ [0 , 2^n) . 1/sqrt(2) * omega(t,2) |t⟩ ⊗ y[j]  ⊗ x[k] } 
    
    y, prob *= measA(r);
}





