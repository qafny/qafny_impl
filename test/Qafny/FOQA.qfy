// Non-Boolean Amp
// https://arxiv.org/abs/2102.04975

method {:axiom} vf(q: Q[n], n:nat)
    ensure { q[0,n) : en ↦ ∑ k ∈ [0, Pow2(n)) . (-omega(v)| k , 0 ⟩, | k , 0 ⟩) }
    
method {:axiom} uf(r:Q[1], q: Q[n], n:nat)
    ensure {       r[1],q[0,n) : en ↦ sin (theta) . |0⟩vf(|k⟩) + cos (theta) . |1⟩|k⟩ }
    
    
function {:axiom) inverse(uf : Q[n] -> nat -> Q[n]) //inverse function is always existed, so add to language op set.
                                                     //the current implementation plan is to make the inverse function as built-in as ^{-1}


method LCUApp(p:Q[1], r:Q[1], q:Q[n], n:nat, alpha)
  requires forall k :: 0 <= k < |alpha| ==> 0 <= alpha[k] < 1
{
  p[0] *= (lambda x => rot(alpha).x);
  if (r[0]) { p[0] *= (lambda x => omega(-1,2).x); }
  uf(r,q,n);
  if (p[0]) { r[0] *= (lambda x => omega(1,2).x); }
  inverse(uf)(r,q,n);
  p[0] *= inverse((lambda x => rot(alpha).x));
}

method FOQA(p:Q[1], r:Q[n], q:Q[m], n:nat, m:nat, alpha: [real]) returns (y: nat, prob: real)
    requires { p[0] : nor ↦ |0⟩ }
    requires |alpha| == n
    ensures { p[0],q[0,n) : en ↦ sin (theta) . |0⟩vf(|k⟩) + cos (theta) . |1⟩|k⟩ }
{   
    
    uf(r,q,m);
    
    for j in [0,n)
    {
      LCUApp(p,r[j],q,n,alpha[i]);
      y, prob := meas(r[j]);
      
    }
}
