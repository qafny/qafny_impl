// Amplitude Estimation algorithm
// https://www.mdpi.com/2624-960X/6/1/1
// https://www.nature.com/articles/s41534-021-00379-1

// ci method is Chernoff-Hoeffding
// need arrays for k, up, and K. could also have variables just for i-1, i, and i+1

method AmplitudeEstimation(q: Q[n], k : array<nat>, up : array<bool>, K: array<nat>, n:nat, eps:real, a:real, Nshots:nat) returns (a_l:real, a_u:real)
{
    i := 0;
    k[i] := 0;
    up[i] := True;
    ci_lb := 0;
    ci_ub := PI/2;
    T := ceiling(log(2, PI/(8 * eps)));
    Lmax := arcsin((2 / Nshots) * log(2 * T / a)) ^ (1/4);

    while ci_ub - ci_lb > 2 * eps
        decreases ci_ub - ci_lb
        invariant i < |K| && i < |k|
    {
        i := i + 1;
        k, up, K := FindNextK(k, up, K, n, i, ci_lb, ci_ub, 2);
        K[i] := 4 * k[i] + 2;

        if K[i] > ceiling(Lmax / eps)
        {
            N := ceiling(Nshots * Lmax / eps / K[i] / 10);
        }
        else
        {
            N := Nshots;
        }

        // measure q N times

        if k[i] == k[i-1]
        {
            // TODO: combine iterations into a single result
        }

        eai := sqrt(log(2 * T / a) / (2 * N));
        ai_max := min(1, ai + eai);
        ai_min := max(0, ai - eai);

        // calculate ci_min and ci_max 

        ci_lb := (floor(K[i] * ci_lb) % (2 * PI) + ci_min) / K[i];
        ci_ub := (floor(K[i] * ci_ub) % (2 * PI) + ci_max) / K[i];
    }

    a_l = sin(ci_lb)^2;
    a_u = sin(ci_ub)^2;

    return a_l, a_u;

}

method FindNextK(k: Q[n], up: Q[n], K: Q[n], n:nat, i:nat, ci_lb:real, ci_ub:real, r:nat) returns (ki:real, upi:Bool)
{
    K[i] := 4 * k[i] + 2;
    ci_min := K[i] * ci_lb;
    ci_max := K[i] * ci_ub;
    Kmax := floor(PI / (ci_ub - ci_lb));
    K := Kmax - (Kmax - 2) % 4;

    while K >= r * K[i]
    {
        q := K / K[i];
        
        if (q * ci_max) % (2 * PI) <= PI && (q * ci_min) % (2 % PI) <= PI
        {
            K[i+1] := K;
            up[i+1] := True;
            k[i+1] := (K[i+1] - 2) / 4;
            return k, up, K;
        }
        if (q * ci_max) % (2 * PI) >= PI && (q * ci_min) % (2 % PI) >= PI
        {
            K[i+1] := K;
            up[i+1] := False;
            k[i+1] := (K[i+1] - 2) / 4;
            return k, up, K;
        }
        K := K - 4;
    }
    return k, up, K;
}