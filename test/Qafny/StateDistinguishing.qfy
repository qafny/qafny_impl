// State Distinguishing in the swap text paper
// 2. Quantum Fingerprinting without Shared Keys
// https://arxiv.org/pdf/quant-ph/0102001.pdf 

// q and p are messages, we want to check if they are equal. r is initialized to all zeroes
// r is one qubit. q and p are n qubits.
method swap(n: nat, q: Q[n], p: Q[n])
	ensures { q[0, n) : en ↦ old(p[0, n)) }
	ensures { p[0, n) : en ↦ old(q[0, n)) }
{
   for j in [0, n) {
	  if p[j] { q[j] *= λ(x => |x + 1⟩); }
	  if q[j] { p[j] *= λ(x => |x + 1⟩); }
	  if p[j] { q[j] *= λ(x => |x + 1⟩); }
	}     
}

method permLoop(r: Q[k][n], q: Q[k][n], p: Q[k][n], t: nat, k: nat, n: nat)
	requires t < k
	ensures { q[t][0, n) : en ↦ old(p[k - 1][0, n)) }
	ensures { p[k - 1][0, n) : en ↦ old(q[t][0, n)) }

method permLoop(k: nat, n: nat, r: Q[k][n], q: Q[k][n], p: Q[k][n], t: nat) 
	ensures { q[t][0, n) : en ↦ old(p[k][0, n)) }
	ensures { p[k][0, n) : en ↦ old(q[t][0, n)) }
{
	for j in [0, k) && r[j] == k {
		swap(q[t], p[k - 1], n);
	}
}


method StateDist(m: nat, n: nat, r: Q[k][n], q: Q[k][n], p: Q[k][n]) returns (y: nat, prob: real)
	requires { forall j :: 0 <= j < k ==> r[k][0, n) : nor ↦ |0⟩ }
	requires { q[0, n) : en ↦ u }
	requires { p[0, n) : en ↦ v }
	ensures { u == v ==> y == 1 ==> prob == 0 }
	ensures { u != v ==> y == 1 ==> prob == 1/2 - 1/2 * norm(u, v) } // we need to define norm of two states.
{
	// Apply F to register P
	permInit(r, n, k); //use another gate to do permutation this step will be very hard. Need to think of an implementation or assumption

	// controlled SWAP (controlled by first qubit of r)
	for t in [0, k) {
		for w in [0, k) && r[w] == t
			invariant { q[w][0, n) : en ↦ old(p[t][0, n)) }
			invariant { p[t][0, n) : en ↦ old(q[w][0, n)) }
		{
			swap(q[w], p[t], n);
		}
	}

	// Apply F† to P
	permInit(r, n, k); //use another gate to do reversed permutation

	// measure final state of P
	y, prob *= measure(r[0][0, n));
}
